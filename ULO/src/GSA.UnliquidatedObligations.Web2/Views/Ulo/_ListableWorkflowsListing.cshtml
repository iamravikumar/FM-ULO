@using GSA.UnliquidatedObligations.Web.Models
@using GSA.UnliquidatedObligations.BusinessLayer.Data
@using System.Linq
@model IEnumerable<ListableWorkflows_Result0>
@{
    var workflowDescription = (GSA.UnliquidatedObligations.BusinessLayer.Workflow.IWorkflowDescription)ViewBag.WorkflowDescription;
    var todaysDate = DateTime.Today;
    var allAreUnassigned = ViewBag.AllAreUnassigned is bool ? (bool)ViewBag.AllAreUnassigned : false;
    var showReassignmentButton = allAreUnassigned || (ViewBag.ShowReassignButton is bool ? (bool)ViewBag.ShowReassignButton : false);
    var userReassignRegions = new List<int?>();// User.GetReassignmentGroupRegions();
    var rfrIdByWorkflow = new Dictionary<ListableWorkflows_Result0, int?>();


    var hasData = false;
    var noDataMessage = ViewBag.NoDataMessage as string ?? AspHelpers.NoResultsMessage;

    Logger.Information("Inside {view}", this.GetType().Name);
    if (ViewBag.TotalItemCount != null)
    {
        int totalItemCount = (int)ViewBag.TotalItemCount;
        hasData = totalItemCount > 0;
        Logger.Information("{totalItemCount} and {hasData}", totalItemCount, hasData);
    }
    var tabs = ViewBag.Tabs as IList<WorkflowListTab> ?? WorkflowListTab.None;
    var currentTab = tabs.FirstOrDefault(z => z.IsCurrent);
    var showReviewStatusColumn = tabs.Count == 0 || currentTab.IsAggregateTab;
    var showSelectors = true;
    int tabsWithData = 0;
}

@if (tabs.Count > 0)
{
    <ul class="nav nav-tabs">
        @foreach (var tab in tabs)
        {
            if (tab.ItemCount > 0)
            {
                ++tabsWithData;
                <li class="@(tab.IsCurrent?"active":"")"><a href="?t=@tab.TabKey">@tab.TabName (@tab.ItemCount)</a></li>
            }
        }
    </ul>
}

@{
    Logger.Information("{tabs.Count} {tabsWithData} {hasData}", tabs.Count, tabsWithData, hasData);
}

@if (!hasData || (tabsWithData == 0 && tabs.Count > 0))
{
    <div class="noDataMessage">@noDataMessage</div>
}
else
{

    <div class="col-sm-12" style="padding-top: 10px; text-align: right">
        <strong>Batch Actions:</strong>
        <button disabled="disabled" class="btn btn-primary master request-active selectionCount1 selectionCountMultiple" onclick="markViewed(getSelections('data-id'), false)" data-target="#bulkReassignmentDialog">Mark as unread</button>
        <button disabled="disabled" class="btn btn-primary master request-active selectionCount1 selectionCountMultiple" onclick="markViewed(getSelections('data-id'), true)" data-target="#bulkReassignmentDialog">Mark as read</button>
    </div>

    <table class="table table-responsive active-workflows">
        <thead>
            <tr>
                @if (showSelectors)
                {
                    <th><input type="checkbox" id="allSelector" onclick="allSelectorClicked()" /></th>
                }
                <th>
                    @Html.SortableHeaderFor(z => z.PegasysDocumentNumber, overrideDisplayName: "PDN")
                </th>
                @*
                    <th>
                        @Html.SortableHeaderFor(z => z.UnliquidatedObligation.ReviewId, overrideDisplayName: "Review ID")
                    </th>
                *@
                <th>
                    @Html.SortableHeaderFor(z => z.ReviewName, overrideDisplayName: "Review")
                </th>
                <th>
                    @Html.SortableHeaderFor(z => z.RegionNumber, overrideDisplayName: "Region")
                </th>
                <th>
                    @Html.SortableHeaderFor(z => z.BaCode, overrideDisplayName: "BA Code")
                </th>
                @if (showReviewStatusColumn)
                {
                    <th>
                        @Html.SortableHeaderFor(z => z.Status, overrideDisplayName: "Review Status")
                    </th>
                }
                <th>
                    @Html.SortableHeaderFor(z => z.Org, overrideDisplayName: "Org")
                </th>
                <th>
                    @Html.SortableHeaderFor(z => z.Amount, overrideDisplayName: "Amount")
                </th>
                <th>
                    @Html.SortableHeaderFor(z => z.Valid, overrideDisplayName: "Valid")
                </th>
                <th>
                    @Html.SortableHeaderFor(z => z.AnsweredByUserName, overrideDisplayName: "Last Reviewer")
                </th>
                <th>
                    @Html.SortableHeaderFor(z => z.AnsweredAtUtc, overrideDisplayName: "Last Submission Date")
                </th>
                <th>
                    @Html.SortableHeaderFor(z => z.ViewedAtUtc, overrideDisplayName: "Last View Date")
                </th>
                <th>
                    @Html.SortableHeaderFor(z => z.NoteCnt, overrideDisplayName: "Notes")
                </th>
                @if (showReassignmentButton)
                {
                    <th></th>
                }
            </tr>
        </thead>
        @foreach (var item in Model)
        {
            <tr class="active-workflows-record @(item.IsRead.GetValueOrDefault()?"viewed":"")" data-id="@item.WorkflowId">
                @if (showSelectors)
                {
                    <td><input type="checkbox" class="itemSelector" onclick="selectorClicked()" value="1" data-id="@item.WorkflowId" /></td>
                }
                <td>
                    @Html.ActionLink(item.PdnWithInstance, UloController.ActionNames.Details, UloController.Name, new { uloId = item.TargetUloId, workflowId = item.WorkflowId }, null)
                </td>
                @*
                    <td>
                        @Html.DisplayFor(modelItem => item.UnliquidatedObligation.ReviewId)
                    </td>
                *@
                <td>
                    @Html.DisplayFor(modelItem => item.ReviewName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.RegionNumber)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.BaCode)
                </td>
                @if (showReviewStatusColumn)
                {
                    <td>
                        @Html.DisplayFor(modelItem => item.Status)
                    </td>
                }
                <td>
                    @Html.DisplayFor(modelItem => item.Org)
                </td>
                <td>
                    @Html.Currency(Convert.ToDecimal(item.Amount))
                </td>
                <td>
                    @Html.DisplayIsValid(item.Valid)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.AnsweredByUserName)
                </td>
                <td>
                    @if (item.AnsweredAtUtc.HasValue)
                    {
                        <text>
                            @PortalHelpers.ToLocalizedDateTime(item.AnsweredAtUtc.Value)
                        </text>
                    }
                </td>
                <td>
                    @if (item.ViewedAtUtc.HasValue)
                    {
                        <text>
                            @PortalHelpers.ToLocalizedDateTime(item.ViewedAtUtc.Value)
                        </text>
                    }
                </td>
                <td onclick="openNotesPanel(@item.TargetUloId, '@item.PdnWithInstance', '#NC_@item.WorkflowId')" style="cursor:pointer">
                    Notes (<span class="note-count" id="NC_@item.WorkflowId">@item.NoteCnt</span>)
                </td>
                <td>
                    @if (showReassignmentButton)
                    {
                        int? rfrId = item.RequestForReassignmentId;
                        if (allAreUnassigned || rfrId != null)
                        {
                            rfrIdByWorkflow[item] = rfrId;
                            var modalId = "#" + item.WorkflowId + "RequestForReassignModal";
                            <button type="button" class="btn btn-primary master request-active" data-toggle="modal" data-target="@modalId">
                                Reassign
                            </button>
                        }
                    }
                </td>
            </tr>
        }
    </table>

    if (showReassignmentButton && rfrIdByWorkflow.Count > 0)
    {
        var bulkToken = ViewBag.DetailsBulkToken as RequestForReassignmentsController.DetailsBulkToken;
        foreach (var kvp in rfrIdByWorkflow)
        {
            var rfrId = kvp.Value;
            var wf = kvp.Key;            
            @await Component.InvokeAsync("ReassignInfo", new { workflowId = wf.WorkflowId, uloRegionId = wf.RegionId, isAdmin = true, id = rfrId, bulkToken = bulkToken });
        }
    }
    
    <partial name="_PaginationPartial" />
   
    <partial name="_NotesPanel" />
    
}
