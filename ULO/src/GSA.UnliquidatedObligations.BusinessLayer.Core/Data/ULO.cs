
  
/*
This was autogenerated
DO NOT MODIFY BY HAND!!!
T4 File: SchemaMeta2DbContext.t4
XML File: C:\Users\JasonThomas\source\repos\Guidehouse\GSA\FM-ULO\ULO\src\GSA.UnliquidatedObligations.BusinessLayer.Core\Data\ULO.xml
Generation Time: 01/21/2020 18:38:42
*/
using Microsoft.AspNetCore.Identity;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using RevolutionaryStuff.Core;
using RevolutionaryStuff.Core.ApplicationParts;
using RevolutionaryStuff.Core.Database;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data;
using System.Linq;
using System.Threading.Tasks;
using System.Runtime.Serialization;

namespace GSA.UnliquidatedObligations.BusinessLayer.Data
{
    public partial class UloDbContext
    {
        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);

		protected override void OnModelCreating(ModelBuilder modelBuilder)
		{
            base.OnModelCreating(modelBuilder);
            AddPrecision(modelBuilder);
            AddFluentKeys(modelBuilder);
			AddFluentRelationships(modelBuilder);
			AddQueryFilters(modelBuilder);
            OnModelCreatingPartial(modelBuilder);
		}

		#region Collections
		
		public DbSet<GetEligibleReviewers_Result0> GetEligibleReviewers { get; set; } // table value function
		
		public DbSet<GetMyGroups_Result0> GetMyGroups { get; set; } // table value function
		
		public DbSet<GetUloSummariesByPdn_Result0> GetUloSummariesByPdn { get; set; } // table value function
		
		public DbSet<ListableWorkflows_Result0> ListableWorkflows { get; set; } // table value function
		
		public virtual DbSet<ApplicationUser> ApplicationUsers { get; set; } //dbo.ApplicationUsers

		
		public virtual DbSet<AspNetUser> AspNetUsers { get; set; } //dbo.AspNetUsers

		
		public virtual DbSet<AspnetUserApplicationPermissionClaim> AspnetUserApplicationPermissionClaims { get; set; } //dbo.AspnetUserApplicationPermissionClaims

		
		public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; } //dbo.AspNetUserClaims

		
		public virtual DbSet<AspnetUserSubjectCategoryClaim> AspnetUserSubjectCategoryClaims { get; set; } //dbo.AspnetUserSubjectCategoryClaims

		
		public virtual DbSet<Attachment> Attachments { get; set; } //dbo.Attachments

		
		public virtual DbSet<CardholderDocumentMap> CardholderDocumentMap { get; set; } //dbo.CardholderDocumentMap

		
		public virtual DbSet<Document> Documents { get; set; } //dbo.Documents

		
		public virtual DbSet<DocumentDocumentType> DocumentDocumentTypes { get; set; } //dbo.DocumentDocumentTypes

		
		public virtual DbSet<DocumentType> DocumentTypes { get; set; } //dbo.DocumentTypes

		
		public virtual DbSet<EmailTemplate> EmailTemplates { get; set; } //dbo.EmailTemplates

		
		public virtual DbSet<FinancialActivity> FinancialActivities { get; set; } //dbo.FinancialActivities

		
		public virtual DbSet<FiscalMonthMapping> FiscalMonthMapping { get; set; } //dbo.FiscalMonthMapping

		
		public virtual DbSet<MostRecentWorkflowView> MostRecentWorkflowViews { get; set; } //dbo.MostRecentWorkflowViews

		
		public virtual DbSet<Note> Notes { get; set; } //dbo.Notes

		
		public virtual DbSet<PdnAttribute> PdnAttributes { get; set; } //dbo.PdnAttributes

		
		public virtual DbSet<Region> Regions { get; set; } //gsa.Regions

		
		public virtual DbSet<ReportDefinition> ReportDefinitions { get; set; } //dbo.ReportDefinitions

		
		public virtual DbSet<RequestForReassignment> RequestForReassignment { get; set; } //dbo.RequestForReassignment

		
		public virtual DbSet<Review> Reviews { get; set; } //dbo.Reviews

		
		public virtual DbSet<ReviewStat> ReviewStats { get; set; } //dbo.ReviewStats

		
		public virtual DbSet<SemiAnnualSamplingStat> SemiAnnualSamplingStats { get; set; } //dbo.SemiAnnualSamplingStats

		
		public virtual DbSet<UnliqudatedObjectsWorkflowQuestion> UnliqudatedObjectsWorkflowQuestions { get; set; } //dbo.UnliqudatedObjectsWorkflowQuestions

		
		public virtual DbSet<UnliquidatedObligation> UnliquidatedObligations { get; set; } //dbo.UnliquidatedObligations

		
		public virtual DbSet<UserUser> UserUsers { get; set; } //dbo.UserUsers

		
		public virtual DbSet<Workflow> Workflows { get; set; } //dbo.Workflows

		
		public virtual DbSet<WorkflowActivity> WorkflowActivities { get; set; } //dbo.WorkflowActivities

		
		public virtual DbSet<WorkflowDefinition> WorkflowDefinitions { get; set; } //dbo.WorkflowDefinitions

		
		public virtual DbSet<WorkflowHistory> WorkflowHistory { get; set; } //dbo.WorkflowHistory

		
		public virtual DbSet<WorkflowJustification> WorkflowJustifications { get; set; } //dbo.WorkflowJustifications

		
		public virtual DbSet<WorkflowProhibitedOwner> WorkflowProhibitedOwners { get; set; } //dbo.WorkflowProhibitedOwners

		
		public virtual DbSet<WorkflowView> WorkflowViews { get; set; } //dbo.WorkflowViews

		
		public virtual DbSet<Zone> Zones { get; set; } //gsa.Zones

		#endregion

		#region Sprocs

		public async Task<ConnectionHelpers.Result> CreateULOAndAssignWfAsync(int? reviewId = null, int? workflowDefinitionId = null, DateTime? reviewDate = null,  TimeSpan? commandTimeout=null) 
		{
            var ps = new SqlParameter[]
                {
                    new SqlParameter("@reviewId", reviewId==null ? DBNull.Value:(object) reviewId){Direction=ParameterDirection.Input},
                    new SqlParameter("@workflowDefinitionId", workflowDefinitionId==null ? DBNull.Value:(object) workflowDefinitionId){Direction=ParameterDirection.Input},
                    new SqlParameter("@reviewDate", reviewDate==null ? DBNull.Value:(object) reviewDate){Direction=ParameterDirection.Input},
                };
            var conn = Database.GetDbConnection();
            await EnsureConnectedAsync(conn);
            return await conn.ExecuteNonQueryAsync(null, "dbo.CreateULOAndAssignWf", commandTimeout, ps);
		}

		public async Task<ConnectionHelpers.Result<GetEligibleReviewers_Result0>> GetEligibleReviewersAsync(string workflowIdCsv = null, bool? qualifiedOnly = null, bool? debugMode = null,  TimeSpan? commandTimeout=null) 
		{
            var ps = new SqlParameter[]
                {
                    new SqlParameter("@workflowIdCsv", workflowIdCsv==null ? DBNull.Value:(object) workflowIdCsv){Direction=ParameterDirection.Input, Size=4000},
                    new SqlParameter("@qualifiedOnly", qualifiedOnly==null ? DBNull.Value:(object) qualifiedOnly){Direction=ParameterDirection.Input},
                    new SqlParameter("@debugMode", debugMode==null ? DBNull.Value:(object) debugMode){Direction=ParameterDirection.Input},
                };
            var conn = Database.GetDbConnection();
            await EnsureConnectedAsync(conn);
            return await conn.ExecuteReaderAsync<GetEligibleReviewers_Result0>(null, "dbo.GetEligibleReviewers", commandTimeout, ps);
		}

		public async Task<ConnectionHelpers.Result<GetMyGroups_Result0>> GetMyGroupsAsync(string proposedOwnerId = null,  TimeSpan? commandTimeout=null) 
		{
            var ps = new SqlParameter[]
                {
                    new SqlParameter("@proposedOwnerId", proposedOwnerId==null ? DBNull.Value:(object) proposedOwnerId){Direction=ParameterDirection.Input, Size=128},
                };
            var conn = Database.GetDbConnection();
            await EnsureConnectedAsync(conn);
            return await conn.ExecuteReaderAsync<GetMyGroups_Result0>(null, "dbo.GetMyGroups", commandTimeout, ps);
		}

		public async Task<ConnectionHelpers.Result> GetNextLevelOwnerIdAsync(string proposedOwnerId = null, int? workflowId = null, string nextActivityKey = null, string ownerProhibitedPreviousActivityNamesCsv = null, string nextOwnerId = null, bool? debugMode = null,  TimeSpan? commandTimeout=null) 
		{
            var ps = new SqlParameter[]
                {
                    new SqlParameter("@proposedOwnerId", proposedOwnerId==null ? DBNull.Value:(object) proposedOwnerId){Direction=ParameterDirection.Input, Size=128},
                    new SqlParameter("@workflowId", workflowId==null ? DBNull.Value:(object) workflowId){Direction=ParameterDirection.Input},
                    new SqlParameter("@nextActivityKey", nextActivityKey==null ? DBNull.Value:(object) nextActivityKey){Direction=ParameterDirection.Input, Size=128},
                    new SqlParameter("@ownerProhibitedPreviousActivityNamesCsv", ownerProhibitedPreviousActivityNamesCsv==null ? DBNull.Value:(object) ownerProhibitedPreviousActivityNamesCsv){Direction=ParameterDirection.Input, Size=4000},
                    new SqlParameter("@nextOwnerId", nextOwnerId==null ? DBNull.Value:(object) nextOwnerId){Direction=ParameterDirection.InputOutput, Size=128},
                    new SqlParameter("@debugMode", debugMode==null ? DBNull.Value:(object) debugMode){Direction=ParameterDirection.Input},
                };
            var conn = Database.GetDbConnection();
            await EnsureConnectedAsync(conn);
            return await conn.ExecuteNonQueryAsync(null, "dbo.GetNextLevelOwnerId", commandTimeout, ps);
		}

		public async Task<ConnectionHelpers.Result<GetUloSummariesByPdn_Result0>> GetUloSummariesByPdnAsync(string pegasysDocumentNumber = null,  TimeSpan? commandTimeout=null) 
		{
            var ps = new SqlParameter[]
                {
                    new SqlParameter("@pegasysDocumentNumber", pegasysDocumentNumber==null ? DBNull.Value:(object) pegasysDocumentNumber){Direction=ParameterDirection.Input, Size=50},
                };
            var conn = Database.GetDbConnection();
            await EnsureConnectedAsync(conn);
            return await conn.ExecuteReaderAsync<GetUloSummariesByPdn_Result0>(null, "dbo.GetUloSummariesByPdn", commandTimeout, ps);
		}

		public async Task<ConnectionHelpers.Result<ListableWorkflows_Result0>> ListableWorkflowsAsync(string ownerId = null, string viewerId = null,  TimeSpan? commandTimeout=null) 
		{
            var ps = new SqlParameter[]
                {
                    new SqlParameter("@ownerId", ownerId==null ? DBNull.Value:(object) ownerId){Direction=ParameterDirection.Input, Size=128},
                    new SqlParameter("@viewerId", viewerId==null ? DBNull.Value:(object) viewerId){Direction=ParameterDirection.Input, Size=128},
                };
            var conn = Database.GetDbConnection();
            await EnsureConnectedAsync(conn);
            return await conn.ExecuteReaderAsync<ListableWorkflows_Result0>(null, "dbo.ListableWorkflows", commandTimeout, ps);
		}

		#endregion

	}
	[Table("ApplicationUsers", Schema = "dbo")]
	public partial class ApplicationUser : IRdbDataEntity, IValidate, IPreSave
	{
        public static readonly ApplicationUser[] None = new ApplicationUser[0];

		[DisplayName("User Id")]
		[Display(Name = "User Id")]
		[NotNull]
		[Required]
		[MaxLength(128)]
		[Column("UserId", TypeName="nvarchar(128)")]
		public string UserId { get; set; } 	

		[DisplayName("Claim Cnt")]
		[Display(Name = "Claim Cnt")]
		[Column("ClaimCnt")]
		public long? ClaimCnt { get; set; } 	

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public ApplicationUser()
			: this(null)
		{}

		public ApplicationUser(ApplicationUser other, bool copyKey=false)
		{
			if (other!=null)
			{
				UserId = other.UserId;
				ClaimCnt = other.ClaimCnt;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(UserId, nameof(UserId));
			Requires.Text(UserId, nameof(UserId), true, 0, 128);
			PartialValidate();
        }
	}//end of entity class ApplicationUser

	[Table("AspNetRoleClaims", Schema = "dbo")]
	public partial class AspNetRoleClaim : IdentityRoleClaim<string>, IRdbDataEntity, IValidate, IPreSave, IPrimaryKey<int>
	{
        public static readonly AspNetRoleClaim[] None = new AspNetRoleClaim[0];

		object IPrimaryKey.Key { get { return Id; }}
	
		int IPrimaryKey<int>.Key { get { return Id; }}

		[DisplayName("Id")]
		[Display(Name = "Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("Id")]
		public override int Id { get => base.Id; set => base.Id=value; } 	

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} Id={Id} {extras}";
		}

		partial void OnConstructed();
	
		public AspNetRoleClaim()
			: this(null)
		{}

		public AspNetRoleClaim(AspNetRoleClaim other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					Id = other.Id;
				}
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			PartialValidate();
        }
	}//end of entity class AspNetRoleClaim

	[Table("AspNetRoles", Schema = "dbo")]
	public partial class AspNetRole : IdentityRole, IRdbDataEntity, IValidate, IPreSave, IPrimaryKey<string>
	{
        public static readonly AspNetRole[] None = new AspNetRole[0];

		//skipped: dbo.AspNetUserRoles

		//skipped: dbo.AspNetRoleClaims

		object IPrimaryKey.Key { get { return Id; }}
	
		string IPrimaryKey<string>.Key { get { return Id; }}

		[DisplayName("Id")]
		[Display(Name = "Id")]
		[NotNull]
		[Required]
		[Key]
		[MaxLength(128)]
		[Column("Id", TypeName="nvarchar(128)")]
		public override string Id { get => base.Id; set => base.Id=value; } 	

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} Id={Id} {extras}";
		}

		partial void OnConstructed();
	
		public AspNetRole()
			: this(null)
		{}

		public AspNetRole(AspNetRole other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					Id = other.Id;
				}
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(Id, nameof(Id));
			Requires.Text(Id, nameof(Id), true, 0, 128);
			PartialValidate();
        }
	}//end of entity class AspNetRole

	[Table("AspnetUserApplicationPermissionClaims", Schema = "dbo")]
	public partial class AspnetUserApplicationPermissionClaim : IRdbDataEntity, IValidate, IPreSave
	{
        public static readonly AspnetUserApplicationPermissionClaim[] None = new AspnetUserApplicationPermissionClaim[0];

		[DisplayName("Id")]
		[Display(Name = "Id")]
		[Column("Id")]
		public Guid Id { get; set; } 	

		[DisplayName("User Id")]
		[Display(Name = "User Id")]
		[NotNull]
		[Required]
		[MaxLength(128)]
		[Column("UserId", TypeName="nvarchar(128)")]
		public string UserId { get; set; } 	

		[DisplayName("Region")]
		[Display(Name = "Region")]
		[Column("Region")]
		public int? Region { get; set; } 	

		[DisplayName("Permission Name")]
		[Display(Name = "Permission Name")]
		[MaxLength(50)]
		[Column("PermissionName", TypeName="nvarchar(50)")]
		public string PermissionName { get; set; } 	

		[DisplayName("Claim Id")]
		[Display(Name = "Claim Id")]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("ClaimId")]
		public int ClaimId { get; set; } 	

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public AspnetUserApplicationPermissionClaim()
			: this(null)
		{}

		public AspnetUserApplicationPermissionClaim(AspnetUserApplicationPermissionClaim other, bool copyKey=false)
		{
			if (other!=null)
			{
				Id = other.Id;
				UserId = other.UserId;
				Region = other.Region;
				PermissionName = other.PermissionName;
				ClaimId = other.ClaimId;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(UserId, nameof(UserId));
			Requires.Text(UserId, nameof(UserId), true, 0, 128);
			Requires.Text(PermissionName, nameof(PermissionName), true, 0, 50);
			PartialValidate();
        }
	}//end of entity class AspnetUserApplicationPermissionClaim

	[Table("AspNetUserClaims", Schema = "dbo")]
	public partial class AspNetUserClaim : IdentityUserClaim<string>, IRdbDataEntity, IValidate, IPreSave, IPrimaryKey<int>
	{
        public static readonly AspNetUserClaim[] None = new AspNetUserClaim[0];

		object IPrimaryKey.Key { get { return Id; }}
	
		int IPrimaryKey<int>.Key { get { return Id; }}

		[DisplayName("Id")]
		[Display(Name = "Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("Id")]
		public override int Id { get => base.Id; set => base.Id=value; } 	

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} Id={Id} {extras}";
		}

		partial void OnConstructed();
	
		public AspNetUserClaim()
			: this(null)
		{}

		public AspNetUserClaim(AspNetUserClaim other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					Id = other.Id;
				}
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			PartialValidate();
        }
	}//end of entity class AspNetUserClaim

	[Table("AspNetUserLogins", Schema = "dbo")]
	public partial class AspNetUserLogin : IdentityUserLogin<string>, IRdbDataEntity, IValidate, IPreSave
	{
        public static readonly AspNetUserLogin[] None = new AspNetUserLogin[0];

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public AspNetUserLogin()
			: this(null)
		{}

		public AspNetUserLogin(AspNetUserLogin other, bool copyKey=false)
		{
			if (other!=null)
			{
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			PartialValidate();
        }
	}//end of entity class AspNetUserLogin

	[Table("AspNetUserRoles", Schema = "dbo")]
	public partial class AspNetUserRole : IdentityUserRole<string>, IRdbDataEntity, IValidate, IPreSave
	{
        public static readonly AspNetUserRole[] None = new AspNetUserRole[0];

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public AspNetUserRole()
			: this(null)
		{}

		public AspNetUserRole(AspNetUserRole other, bool copyKey=false)
		{
			if (other!=null)
			{
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			PartialValidate();
        }
	}//end of entity class AspNetUserRole

	[Table("AspNetUsers", Schema = "dbo")]
	public partial class AspNetUser : IdentityUser, IRdbDataEntity, IValidate, IPreSave, IPrimaryKey<string>
	{
        public static readonly AspNetUser[] None = new AspNetUser[0];


		//modelBuilder.Entity<Document>(e=>e.HasOne(r=>r.DeletedByUser).WithMany(u=>u.DeletedByUserDocuments).HasForeignKey(r=>r.DeletedByUserId));
		[InverseProperty(nameof(Document.DeletedByUser))]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Document> DeletedByUserDocuments { get; set; } = new List<Document>();


		//modelBuilder.Entity<Attachment>(e=>e.HasOne(r=>r.CreatedByUser).WithMany(u=>u.CreatedByUserAttachments).HasForeignKey(r=>r.CreatedByUserId));
		[InverseProperty(nameof(Attachment.CreatedByUser))]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Attachment> CreatedByUserAttachments { get; set; } = new List<Attachment>();


		//modelBuilder.Entity<Attachment>(e=>e.HasOne(r=>r.DeletedByUser).WithMany(u=>u.DeletedByUserAttachments).HasForeignKey(r=>r.DeletedByUserId));
		[InverseProperty(nameof(Attachment.DeletedByUser))]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Attachment> DeletedByUserAttachments { get; set; } = new List<Attachment>();

		//skipped: dbo.AspNetUserRoles


		//modelBuilder.Entity<Note>(e=>e.HasOne(r=>r.DeletedByUser).WithMany(u=>u.DeletedByUserNotes).HasForeignKey(r=>r.DeletedByUserId));
		[InverseProperty(nameof(Note.DeletedByUser))]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Note> DeletedByUserNotes { get; set; } = new List<Note>();


		//modelBuilder.Entity<AspNetUserClaim>(e=>e.HasOne(r=>r.User).WithMany(u=>u.UserAspNetUserClaims).HasForeignKey(r=>r.UserId));
		[InverseProperty(nameof(AspNetUserClaim.User))]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<AspNetUserClaim> UserAspNetUserClaims { get; set; } = new List<AspNetUserClaim>();

		//skipped: dbo.AspNetUserLogins


		//modelBuilder.Entity<UnliquidatedObligation>(e=>e.HasOne(r=>r.CardholderUser).WithMany(u=>u.CardholderUserUnliquidatedObligations).HasForeignKey(r=>r.CardholderUserId));
		[InverseProperty(nameof(UnliquidatedObligation.CardholderUser))]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<UnliquidatedObligation> CardholderUserUnliquidatedObligations { get; set; } = new List<UnliquidatedObligation>();


		//modelBuilder.Entity<UserUser>(e=>e.HasOne(r=>r.ParentUser).WithMany(u=>u.ParentUserUserUsers).HasForeignKey(r=>r.ParentUserId));
		[InverseProperty(nameof(UserUser.ParentUser))]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<UserUser> ParentUserUserUsers { get; set; } = new List<UserUser>();


		//modelBuilder.Entity<UserUser>(e=>e.HasOne(r=>r.ChildUser).WithMany(u=>u.ChildUserUserUsers).HasForeignKey(r=>r.ChildUserId));
		[InverseProperty(nameof(UserUser.ChildUser))]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<UserUser> ChildUserUserUsers { get; set; } = new List<UserUser>();


		//modelBuilder.Entity<Review>(e=>e.HasOne(r=>r.DeletedByUser).WithMany(u=>u.DeletedByUserReviews).HasForeignKey(r=>r.DeletedByUserId));
		[InverseProperty(nameof(Review.DeletedByUser))]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Review> DeletedByUserReviews { get; set; } = new List<Review>();


		//modelBuilder.Entity<UnliqudatedObjectsWorkflowQuestion>(e=>e.HasOne(r=>r.User).WithMany(u=>u.UserUnliqudatedObjectsWorkflowQuestions).HasForeignKey(r=>r.UserId));
		[InverseProperty(nameof(UnliqudatedObjectsWorkflowQuestion.User))]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<UnliqudatedObjectsWorkflowQuestion> UserUnliqudatedObjectsWorkflowQuestions { get; set; } = new List<UnliqudatedObjectsWorkflowQuestion>();


		//modelBuilder.Entity<WorkflowHistory>(e=>e.HasOne(r=>r.OwnerUser).WithMany(u=>u.OwnerUserWorkflowHistorys).HasForeignKey(r=>r.OwnerUserId));
		[InverseProperty(nameof(WorkflowHistory.OwnerUser))]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<WorkflowHistory> OwnerUserWorkflowHistorys { get; set; } = new List<WorkflowHistory>();


		//modelBuilder.Entity<Note>(e=>e.HasOne(r=>r.User).WithMany(u=>u.UserNotes).HasForeignKey(r=>r.UserId));
		[InverseProperty(nameof(Note.User))]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Note> UserNotes { get; set; } = new List<Note>();


		//modelBuilder.Entity<Workflow>(e=>e.HasOne(r=>r.OwnerUser).WithMany(u=>u.OwnerUserWorkflows).HasForeignKey(r=>r.OwnerUserId));
		[InverseProperty(nameof(Workflow.OwnerUser))]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Workflow> OwnerUserWorkflows { get; set; } = new List<Workflow>();


		//modelBuilder.Entity<RequestForReassignment>(e=>e.HasOne(r=>r.SuggestedReviewer).WithMany(u=>u.SuggestedReviewerRequestForReassignments).HasForeignKey(r=>r.SuggestedReviewerId));
		[InverseProperty(nameof(RequestForReassignment.SuggestedReviewer))]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<RequestForReassignment> SuggestedReviewerRequestForReassignments { get; set; } = new List<RequestForReassignment>();


		//modelBuilder.Entity<WorkflowView>(e=>e.HasOne(r=>r.User).WithMany(u=>u.UserWorkflowViews).HasForeignKey(r=>r.UserId));
		[InverseProperty(nameof(WorkflowView.User))]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<WorkflowView> UserWorkflowViews { get; set; } = new List<WorkflowView>();


		//modelBuilder.Entity<Document>(e=>e.HasOne(r=>r.UploadedByUser).WithMany(u=>u.UploadedByUserDocuments).HasForeignKey(r=>r.UploadedByUserId));
		[InverseProperty(nameof(Document.UploadedByUser))]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Document> UploadedByUserDocuments { get; set; } = new List<Document>();

		object IPrimaryKey.Key { get { return Id; }}
	
		string IPrimaryKey<string>.Key { get { return Id; }}

		[DisplayName("Id")]
		[Display(Name = "Id")]
		[NotNull]
		[Required]
		[Key]
		[MaxLength(128)]
		[Column("Id", TypeName="nvarchar(128)")]
		public override string Id { get => base.Id; set => base.Id=value; } 	

		[DisplayName("Lockout End Date Utc")]
		[Display(Name = "Lockout End Date Utc")]
		[DataType(DataType.DateTime)]
		[Column("LockoutEndDateUtc")]
		public DateTime? LockoutEndDateUtc { get; set; } 	


		[DisplayName("Lockout End Date")]
		[NotMapped]
		[JsonIgnore]
		[DataType(DataType.DateTime)]
        [IgnoreDataMember]
		public DateTime? LockoutEndDate => LockoutEndDateUtc?.ToLocalTime();

		[DisplayName("User Type")]
		[Display(Name = "User Type")]
		[NotNull]
		[Required]
		[MaxLength(80)]
		[Column("UserType", TypeName="varchar(80)")]
		public string UserType { get; set; } = "Person";	

		[DisplayName("Auto Assign User")]
		[Display(Name = "Auto Assign User")]
		[Column("AutoAssignUser")]
		public bool AutoAssignUser { get; set; } = false;	

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} Id={Id} {extras}";
		}

		partial void OnConstructed();
	
		public AspNetUser()
			: this(null)
		{}

		public AspNetUser(AspNetUser other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					Id = other.Id;
				}
				DeletedByUserDocuments = other.DeletedByUserDocuments;
				CreatedByUserAttachments = other.CreatedByUserAttachments;
				DeletedByUserAttachments = other.DeletedByUserAttachments;
				DeletedByUserNotes = other.DeletedByUserNotes;
				UserAspNetUserClaims = other.UserAspNetUserClaims;
				CardholderUserUnliquidatedObligations = other.CardholderUserUnliquidatedObligations;
				ParentUserUserUsers = other.ParentUserUserUsers;
				ChildUserUserUsers = other.ChildUserUserUsers;
				DeletedByUserReviews = other.DeletedByUserReviews;
				UserUnliqudatedObjectsWorkflowQuestions = other.UserUnliqudatedObjectsWorkflowQuestions;
				OwnerUserWorkflowHistorys = other.OwnerUserWorkflowHistorys;
				UserNotes = other.UserNotes;
				OwnerUserWorkflows = other.OwnerUserWorkflows;
				SuggestedReviewerRequestForReassignments = other.SuggestedReviewerRequestForReassignments;
				UserWorkflowViews = other.UserWorkflowViews;
				UploadedByUserDocuments = other.UploadedByUserDocuments;
				LockoutEndDateUtc = other.LockoutEndDateUtc;
				UserType = other.UserType;
				AutoAssignUser = other.AutoAssignUser;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(Id, nameof(Id));
			Requires.Text(Id, nameof(Id), true, 0, 128);
			Requires.NonNull(UserType, nameof(UserType));
			Requires.Text(UserType, nameof(UserType), true, 0, 80);
			PartialValidate();
        }
	}//end of entity class AspNetUser

	[Table("AspnetUserSubjectCategoryClaims", Schema = "dbo")]
	public partial class AspnetUserSubjectCategoryClaim : IRdbDataEntity, IValidate, IPreSave
	{
        public static readonly AspnetUserSubjectCategoryClaim[] None = new AspnetUserSubjectCategoryClaim[0];

		[DisplayName("Id")]
		[Display(Name = "Id")]
		[Column("Id")]
		public Guid Id { get; set; } 	

		[DisplayName("User Id")]
		[Display(Name = "User Id")]
		[NotNull]
		[Required]
		[MaxLength(128)]
		[Column("UserId", TypeName="nvarchar(128)")]
		public string UserId { get; set; } 	

		[DisplayName("Region")]
		[Display(Name = "Region")]
		[Column("Region")]
		public int? Region { get; set; } 	

		[DisplayName("BACode")]
		[Display(Name = "BACode")]
		[MaxLength(50)]
		[Column("BACode", TypeName="nvarchar(50)")]
		public string BACode { get; set; } 	

		[DisplayName("Document Type")]
		[Display(Name = "Document Type")]
		[MaxLength(50)]
		[Column("DocumentType", TypeName="nvarchar(50)")]
		public string DocumentType { get; set; } 	

		[DisplayName("Org Code")]
		[Display(Name = "Org Code")]
		[MaxLength(50)]
		[Column("OrgCode", TypeName="nvarchar(50)")]
		public string OrgCode { get; set; } 	

		[DisplayName("Claim Id")]
		[Display(Name = "Claim Id")]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("ClaimId")]
		public int ClaimId { get; set; } 	

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public AspnetUserSubjectCategoryClaim()
			: this(null)
		{}

		public AspnetUserSubjectCategoryClaim(AspnetUserSubjectCategoryClaim other, bool copyKey=false)
		{
			if (other!=null)
			{
				Id = other.Id;
				UserId = other.UserId;
				Region = other.Region;
				BACode = other.BACode;
				DocumentType = other.DocumentType;
				OrgCode = other.OrgCode;
				ClaimId = other.ClaimId;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(UserId, nameof(UserId));
			Requires.Text(UserId, nameof(UserId), true, 0, 128);
			Requires.Text(BACode, nameof(BACode), true, 0, 50);
			Requires.Text(DocumentType, nameof(DocumentType), true, 0, 50);
			Requires.Text(OrgCode, nameof(OrgCode), true, 0, 50);
			PartialValidate();
        }
	}//end of entity class AspnetUserSubjectCategoryClaim

	[Table("AspNetUserTokens", Schema = "dbo")]
	public partial class AspNetUserToken : IdentityUserToken<string>, IRdbDataEntity, IValidate, IPreSave
	{
        public static readonly AspNetUserToken[] None = new AspNetUserToken[0];

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public AspNetUserToken()
			: this(null)
		{}

		public AspNetUserToken(AspNetUserToken other, bool copyKey=false)
		{
			if (other!=null)
			{
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			PartialValidate();
        }
	}//end of entity class AspNetUserToken

	[Table("Attachments", Schema = "dbo")]
	public partial class Attachment : IRdbDataEntity, IValidate, IPreSave, IPrimaryKey<int>
	{
        public static readonly Attachment[] None = new Attachment[0];

		object IPrimaryKey.Key { get { return AttachmentsId; }}
	
		int IPrimaryKey<int>.Key { get { return AttachmentsId; }}

		[DisplayName("Attachments Id")]
		[Display(Name = "Attachments Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("AttachmentsId")]
		public int AttachmentsId { get; set; } 	

		[DisplayName("File Name")]
		[Display(Name = "File Name")]
		[MaxLength(500)]
		[Column("FileName", TypeName="varchar(500)")]
		public string FileName { get; set; } 	

		[DisplayName("File Path")]
		[Display(Name = "File Path")]
		[MaxLength(300)]
		[Column("FilePath", TypeName="varchar(300)")]
		public string FilePath { get; set; } 	

		[DisplayName("Document Id")]
		[Display(Name = "Document Id")]
		[Column("DocumentId")]
		public int? DocumentId { get; set; } 	

		//LinksTo:dbo.Documents
		[ForeignKey("DocumentId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Document Document { get; set; } 

		[DisplayName("File Size")]
		[Display(Name = "File Size")]
		[Column("FileSize")]
		public long FileSize { get; set; } 	

		[DisplayName("Content Type")]
		[Display(Name = "Content Type")]
		[NotNull]
		[Required]
		[MaxLength(100)]
		[Column("ContentType", TypeName="nvarchar(100)")]
		public string ContentType { get; set; } 	

		[DisplayName("Created At Utc")]
		[Display(Name = "Created At Utc")]
		[DataType(DataType.DateTime)]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; } = DateTime.UtcNow;	


		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
		[DataType(DataType.DateTime)]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Created By User Id")]
		[Display(Name = "Created By User Id")]
		[MaxLength(128)]
		[Column("CreatedByUserId", TypeName="nvarchar(128)")]
		public string CreatedByUserId { get; set; } //= (NULL);	

		//LinksTo:dbo.AspNetUsers
		[ForeignKey("CreatedByUserId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public AspNetUser CreatedByUser { get; set; } 

		[DisplayName("Deleted At Utc")]
		[Display(Name = "Deleted At Utc")]
		[DataType(DataType.DateTime)]
		[Column("DeletedAtUtc")]
		public DateTime? DeletedAtUtc { get; set; } //= (NULL);	


		[DisplayName("Deleted At")]
		[NotMapped]
		[JsonIgnore]
		[DataType(DataType.DateTime)]
        [IgnoreDataMember]
		public DateTime? DeletedAt => DeletedAtUtc?.ToLocalTime();

		[DisplayName("Deleted By User Id")]
		[Display(Name = "Deleted By User Id")]
		[MaxLength(128)]
		[Column("DeletedByUserId", TypeName="nvarchar(128)")]
		public string DeletedByUserId { get; set; } //= (NULL);	

		//LinksTo:dbo.AspNetUsers
		[ForeignKey("DeletedByUserId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public AspNetUser DeletedByUser { get; set; } 

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} AttachmentsId={AttachmentsId} {extras}";
		}

		partial void OnConstructed();
	
		public Attachment()
			: this(null)
		{}

		public Attachment(Attachment other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					AttachmentsId = other.AttachmentsId;
				}
				FileName = other.FileName;
				FilePath = other.FilePath;
				DocumentId = other.DocumentId;
				FileSize = other.FileSize;
				ContentType = other.ContentType;
				CreatedByUserId = other.CreatedByUserId;
				DeletedAtUtc = other.DeletedAtUtc;
				DeletedByUserId = other.DeletedByUserId;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.Text(FileName, nameof(FileName), true, 0, 500);
			Requires.Text(FilePath, nameof(FilePath), true, 0, 300);
			Requires.NonNull(ContentType, nameof(ContentType));
			Requires.Text(ContentType, nameof(ContentType), true, 0, 100);
			Requires.Text(CreatedByUserId, nameof(CreatedByUserId), true, 0, 128);
			Requires.Text(DeletedByUserId, nameof(DeletedByUserId), true, 0, 128);
			PartialValidate();
        }
	}//end of entity class Attachment

	[Table("CardholderDocumentMap", Schema = "dbo")]
	public partial class CardholderDocumentMap : IRdbDataEntity, IValidate, IPreSave
	{
        public static readonly CardholderDocumentMap[] None = new CardholderDocumentMap[0];

		[DisplayName("Review Id")]
		[Display(Name = "Review Id")]
		[Column("ReviewId")]
		public int ReviewId { get; set; } 	

		[DisplayName("Doc Num")]
		[Display(Name = "Doc Num")]
		[MaxLength(50)]
		[Column("DocNum", TypeName="varchar(50)")]
		public string DocNum { get; set; } 	

		[DisplayName("Mappings")]
		[Display(Name = "Mappings")]
		[Column("Mappings")]
		public int? Mappings { get; set; } 	

		[DisplayName("Pos")]
		[Display(Name = "Pos")]
		[Column("Pos")]
		public long? Pos { get; set; } 	

		[DisplayName("Alias8")]
		[Display(Name = "Alias8")]
		[MaxLength(50)]
		[Column("Alias8", TypeName="varchar(50)")]
		public string Alias8 { get; set; } 	

		[DisplayName("Alias")]
		[Display(Name = "Alias")]
		[MaxLength(50)]
		[Column("Alias", TypeName="varchar(50)")]
		public string Alias { get; set; } 	

		[DisplayName("Cardholder Name")]
		[Display(Name = "Cardholder Name")]
		[MaxLength(155)]
		[Column("CardholderName", TypeName="varchar(155)")]
		public string CardholderName { get; set; } 	

		[DisplayName("Cardholder Email")]
		[Display(Name = "Cardholder Email")]
		[DataType(DataType.EmailAddress)]
		[MaxLength(254)]
		[Column("CardholderEmail", TypeName="varchar(254)")]
		public string CardholderEmail { get; set; } 	

		[DisplayName("User Id")]
		[Display(Name = "User Id")]
		[MaxLength(128)]
		[Column("UserId", TypeName="nvarchar(128)")]
		public string UserId { get; set; } 	

		[DisplayName("Region AC")]
		[Display(Name = "Region AC")]
		[Column("RegionAC")]
		public int? RegionAC { get; set; } 	

		[DisplayName("Region")]
		[Display(Name = "Region")]
		[Column("Region")]
		public int? Region { get; set; } 	

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public CardholderDocumentMap()
			: this(null)
		{}

		public CardholderDocumentMap(CardholderDocumentMap other, bool copyKey=false)
		{
			if (other!=null)
			{
				ReviewId = other.ReviewId;
				DocNum = other.DocNum;
				Mappings = other.Mappings;
				Pos = other.Pos;
				Alias8 = other.Alias8;
				Alias = other.Alias;
				CardholderName = other.CardholderName;
				CardholderEmail = other.CardholderEmail;
				UserId = other.UserId;
				RegionAC = other.RegionAC;
				Region = other.Region;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.Text(DocNum, nameof(DocNum), true, 0, 50);
			Requires.Text(Alias8, nameof(Alias8), true, 0, 50);
			Requires.Text(Alias, nameof(Alias), true, 0, 50);
			Requires.Text(CardholderName, nameof(CardholderName), true, 0, 155);
			Requires.Text(CardholderEmail, nameof(CardholderEmail), true, 0, 254);
			Requires.Text(UserId, nameof(UserId), true, 0, 128);
			PartialValidate();
        }
	}//end of entity class CardholderDocumentMap

	[Table("DocumentDocumentTypes", Schema = "dbo")]
	public partial class DocumentDocumentType : IRdbDataEntity, IValidate, IPreSave, IPrimaryKey<int>
	{
        public static readonly DocumentDocumentType[] None = new DocumentDocumentType[0];

		object IPrimaryKey.Key { get { return DocumentDocumentTypeId; }}
	
		int IPrimaryKey<int>.Key { get { return DocumentDocumentTypeId; }}

		[DisplayName("Document Document Type Id")]
		[Display(Name = "Document Document Type Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("DocumentDocumentTypeId")]
		public int DocumentDocumentTypeId { get; set; } 	

		[DisplayName("Document Id")]
		[Display(Name = "Document Id")]
		[Column("DocumentId")]
		public int DocumentId { get; set; } 	

		//LinksTo:dbo.Documents
		[ForeignKey("DocumentId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Document Document { get; set; } 

		[DisplayName("Document Type Id")]
		[Display(Name = "Document Type Id")]
		[Column("DocumentTypeId")]
		public int DocumentTypeId { get; set; } 	

		//LinksTo:dbo.DocumentTypes
		[ForeignKey("DocumentTypeId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DocumentType DocumentType { get; set; } 

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} DocumentDocumentTypeId={DocumentDocumentTypeId} {extras}";
		}

		partial void OnConstructed();
	
		public DocumentDocumentType()
			: this(null)
		{}

		public DocumentDocumentType(DocumentDocumentType other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					DocumentDocumentTypeId = other.DocumentDocumentTypeId;
				}
				DocumentId = other.DocumentId;
				DocumentTypeId = other.DocumentTypeId;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			PartialValidate();
        }
	}//end of entity class DocumentDocumentType

	[Table("Documents", Schema = "dbo")]
	public partial class Document : IRdbDataEntity, IValidate, IPreSave, IPrimaryKey<int>
	{
        public static readonly Document[] None = new Document[0];


		//modelBuilder.Entity<Attachment>(e=>e.HasOne(r=>r.Document).WithMany(u=>u.DocumentAttachments).HasForeignKey(r=>r.DocumentId));
		[InverseProperty(nameof(Attachment.Document))]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Attachment> DocumentAttachments { get; set; } = new List<Attachment>();


		//modelBuilder.Entity<DocumentDocumentType>(e=>e.HasOne(r=>r.Document).WithMany(u=>u.DocumentDocumentDocumentTypes).HasForeignKey(r=>r.DocumentId));
		[InverseProperty(nameof(DocumentDocumentType.Document))]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<DocumentDocumentType> DocumentDocumentDocumentTypes { get; set; } = new List<DocumentDocumentType>();

		object IPrimaryKey.Key { get { return DocumentId; }}
	
		int IPrimaryKey<int>.Key { get { return DocumentId; }}

		[DisplayName("Document Id")]
		[Display(Name = "Document Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("DocumentId")]
		public int DocumentId { get; set; } 	

		[DisplayName("Workflow Id")]
		[Display(Name = "Workflow Id")]
		[Column("WorkflowId")]
		public int WorkflowId { get; set; } 	

		//LinksTo:dbo.Workflows
		[ForeignKey("WorkflowId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Workflow Workflow { get; set; } 

		[DisplayName("Uploaded By User Id")]
		[Display(Name = "Uploaded By User Id")]
		[NotNull]
		[Required]
		[MaxLength(128)]
		[Column("UploadedByUserId", TypeName="nvarchar(128)")]
		public string UploadedByUserId { get; set; } 	

		//LinksTo:dbo.AspNetUsers
		[ForeignKey("UploadedByUserId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public AspNetUser UploadedByUser { get; set; } 

		[DisplayName("Created At Utc")]
		[Display(Name = "Created At Utc")]
		[DataType(DataType.DateTime)]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; } = DateTime.UtcNow;	


		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
		[DataType(DataType.DateTime)]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Document Name")]
		[Display(Name = "Document Name")]
		[MaxLength(255)]
		[Column("DocumentName", TypeName="nvarchar(255)")]
		public string DocumentName { get; set; } 	

		[DisplayName("Deleted At Utc")]
		[Display(Name = "Deleted At Utc")]
		[DataType(DataType.DateTime)]
		[Column("DeletedAtUtc")]
		public DateTime? DeletedAtUtc { get; set; } //= (NULL);	


		[DisplayName("Deleted At")]
		[NotMapped]
		[JsonIgnore]
		[DataType(DataType.DateTime)]
        [IgnoreDataMember]
		public DateTime? DeletedAt => DeletedAtUtc?.ToLocalTime();

		[DisplayName("Deleted By User Id")]
		[Display(Name = "Deleted By User Id")]
		[MaxLength(128)]
		[Column("DeletedByUserId", TypeName="nvarchar(128)")]
		public string DeletedByUserId { get; set; } //= (NULL);	

		//LinksTo:dbo.AspNetUsers
		[ForeignKey("DeletedByUserId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public AspNetUser DeletedByUser { get; set; } 

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} DocumentId={DocumentId} {extras}";
		}

		partial void OnConstructed();
	
		public Document()
			: this(null)
		{}

		public Document(Document other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					DocumentId = other.DocumentId;
				}
				DocumentAttachments = other.DocumentAttachments;
				DocumentDocumentDocumentTypes = other.DocumentDocumentDocumentTypes;
				WorkflowId = other.WorkflowId;
				UploadedByUserId = other.UploadedByUserId;
				DocumentName = other.DocumentName;
				DeletedAtUtc = other.DeletedAtUtc;
				DeletedByUserId = other.DeletedByUserId;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(UploadedByUserId, nameof(UploadedByUserId));
			Requires.Text(UploadedByUserId, nameof(UploadedByUserId), true, 0, 128);
			Requires.Text(DocumentName, nameof(DocumentName), true, 0, 255);
			Requires.Text(DeletedByUserId, nameof(DeletedByUserId), true, 0, 128);
			PartialValidate();
        }
	}//end of entity class Document

	[Table("DocumentTypes", Schema = "dbo")]
	public partial class DocumentType : IRdbDataEntity, IValidate, IPreSave, IPrimaryKey<int>
	{
        public static readonly DocumentType[] None = new DocumentType[0];


		//modelBuilder.Entity<DocumentDocumentType>(e=>e.HasOne(r=>r.DocumentType).WithMany(u=>u.DocumentTypeDocumentDocumentTypes).HasForeignKey(r=>r.DocumentTypeId));
		[InverseProperty(nameof(DocumentDocumentType.DocumentType))]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<DocumentDocumentType> DocumentTypeDocumentDocumentTypes { get; set; } = new List<DocumentDocumentType>();

		object IPrimaryKey.Key { get { return DocumentTypeId; }}
	
		int IPrimaryKey<int>.Key { get { return DocumentTypeId; }}

		[DisplayName("Document Type Id")]
		[Display(Name = "Document Type Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("DocumentTypeId")]
		public int DocumentTypeId { get; set; } 	

		[DisplayName("Name")]
		[Display(Name = "Name")]
		[NotNull]
		[Required]
		[MaxLength(255)]
		[Column("Name", TypeName="varchar(255)")]
		public string Name { get; set; } 	

		[DisplayName("Doc Type")]
		[Display(Name = "Doc Type")]
		[MaxLength(50)]
		[Column("DocType", TypeName="varchar(50)")]
		public string DocType { get; set; } 	

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} DocumentTypeId={DocumentTypeId} {extras}";
		}

		partial void OnConstructed();
	
		public DocumentType()
			: this(null)
		{}

		public DocumentType(DocumentType other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					DocumentTypeId = other.DocumentTypeId;
				}
				DocumentTypeDocumentDocumentTypes = other.DocumentTypeDocumentDocumentTypes;
				Name = other.Name;
				DocType = other.DocType;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(Name, nameof(Name));
			Requires.Text(Name, nameof(Name), true, 0, 255);
			Requires.Text(DocType, nameof(DocType), true, 0, 50);
			PartialValidate();
        }
	}//end of entity class DocumentType

	[Table("EmailTemplates", Schema = "dbo")]
	public partial class EmailTemplate : IRdbDataEntity, IValidate, IPreSave, IPrimaryKey<int>
	{
        public static readonly EmailTemplate[] None = new EmailTemplate[0];

		object IPrimaryKey.Key { get { return EmailTemplateId; }}
	
		int IPrimaryKey<int>.Key { get { return EmailTemplateId; }}

		[DisplayName("Email Template Id")]
		[Display(Name = "Email Template Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("EmailTemplateId")]
		public int EmailTemplateId { get; set; } 	

		[DisplayName("Email Body")]
		[Display(Name = "Email Body")]
		[Column("EmailBody", TypeName="nvarchar(max)")]
		public string EmailBody { get; set; } 	

		[DisplayName("Email Subject")]
		[Display(Name = "Email Subject")]
		[Column("EmailSubject", TypeName="nvarchar(max)")]
		public string EmailSubject { get; set; } 	

		[DisplayName("Email Html Body")]
		[Display(Name = "Email Html Body")]
		[Column("EmailHtmlBody", TypeName="nvarchar(max)")]
		public string EmailHtmlBody { get; set; } 	

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} EmailTemplateId={EmailTemplateId} {extras}";
		}

		partial void OnConstructed();
	
		public EmailTemplate()
			: this(null)
		{}

		public EmailTemplate(EmailTemplate other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					EmailTemplateId = other.EmailTemplateId;
				}
				EmailBody = other.EmailBody;
				EmailSubject = other.EmailSubject;
				EmailHtmlBody = other.EmailHtmlBody;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.Text(EmailBody, nameof(EmailBody), true, 0, 500);
			Requires.Text(EmailSubject, nameof(EmailSubject), true, 0, 200);
			PartialValidate();
        }
	}//end of entity class EmailTemplate

	[Table("FinancialActivities", Schema = "dbo")]
	public partial class FinancialActivity : IRdbDataEntity, IValidate, IPreSave, IPrimaryKey<int>
	{
        public static readonly FinancialActivity[] None = new FinancialActivity[0];

		object IPrimaryKey.Key { get { return FinancialActivityId; }}
	
		int IPrimaryKey<int>.Key { get { return FinancialActivityId; }}

		[DisplayName("Financial Activity Id")]
		[Display(Name = "Financial Activity Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("FinancialActivityId")]
		public int FinancialActivityId { get; set; } 	

		[DisplayName("Created At Utc")]
		[Display(Name = "Created At Utc")]
		[DataType(DataType.DateTime)]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; } = DateTime.UtcNow;	


		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
		[DataType(DataType.DateTime)]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Deleted At Utc")]
		[Display(Name = "Deleted At Utc")]
		[DataType(DataType.DateTime)]
		[Column("DeletedAtUtc")]
		public DateTime? DeletedAtUtc { get; set; } 	


		[DisplayName("Deleted At")]
		[NotMapped]
		[JsonIgnore]
		[DataType(DataType.DateTime)]
        [IgnoreDataMember]
		public DateTime? DeletedAt => DeletedAtUtc?.ToLocalTime();

		[DisplayName("Ulo Id")]
		[Display(Name = "Ulo Id")]
		[Column("UloId")]
		public int UloId { get; set; } 	

		//LinksTo:dbo.UnliquidatedObligations
		[ForeignKey("UloId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public UnliquidatedObligation Ulo { get; set; } 

		[DisplayName("Activity Date")]
		[Display(Name = "Activity Date")]
		[DataType(DataType.DateTime)]
		[Column("ActivityDate")]
		public DateTime ActivityDate { get; set; } 	

		[DisplayName("Activity Type")]
		[Display(Name = "Activity Type")]
		[NotNull]
		[Required]
		[MaxLength(50)]
		[Column("ActivityType", TypeName="varchar(50)")]
		public string ActivityType { get; set; } 	

		[DisplayName("Reference Number")]
		[Display(Name = "Reference Number")]
		[NotNull]
		[Required]
		[MaxLength(100)]
		[Column("ReferenceNumber", TypeName="varchar(100)")]
		public string ReferenceNumber { get; set; } 	

		[DisplayName("Amount")]
		[Display(Name = "Amount")]
		[DataType(DataType.Currency)]
		[Column("Amount", TypeName="money(0, 0)")]
		public decimal Amount { get; set; } 	

		[DisplayName("Description")]
		[Display(Name = "Description")]
		[Column("Description", TypeName="nvarchar(max)")]
		public string Description { get; set; } 	

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} FinancialActivityId={FinancialActivityId} {extras}";
		}

		partial void OnConstructed();
	
		public FinancialActivity()
			: this(null)
		{}

		public FinancialActivity(FinancialActivity other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					FinancialActivityId = other.FinancialActivityId;
				}
				DeletedAtUtc = other.DeletedAtUtc;
				UloId = other.UloId;
				ActivityDate = other.ActivityDate;
				ActivityType = other.ActivityType;
				ReferenceNumber = other.ReferenceNumber;
				Amount = other.Amount;
				Description = other.Description;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(ActivityType, nameof(ActivityType));
			Requires.Text(ActivityType, nameof(ActivityType), true, 0, 50);
			Requires.NonNull(ReferenceNumber, nameof(ReferenceNumber));
			Requires.Text(ReferenceNumber, nameof(ReferenceNumber), true, 0, 100);
			PartialValidate();
        }
	}//end of entity class FinancialActivity

	[Table("FiscalMonthMapping", Schema = "dbo")]
	public partial class FiscalMonthMapping : IRdbDataEntity, IValidate, IPreSave
	{
        public static readonly FiscalMonthMapping[] None = new FiscalMonthMapping[0];

		[DisplayName("Calendar Month")]
		[Display(Name = "Calendar Month")]
		[Column("CalendarMonth")]
		public int? CalendarMonth { get; set; } 	

		[DisplayName("Fiscal Month")]
		[Display(Name = "Fiscal Month")]
		[MaxLength(5)]
		[Column("FiscalMonth", TypeName="varchar(5)")]
		public string FiscalMonth { get; set; } 	

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public FiscalMonthMapping()
			: this(null)
		{}

		public FiscalMonthMapping(FiscalMonthMapping other, bool copyKey=false)
		{
			if (other!=null)
			{
				CalendarMonth = other.CalendarMonth;
				FiscalMonth = other.FiscalMonth;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.Text(FiscalMonth, nameof(FiscalMonth), true, 0, 5);
			PartialValidate();
        }
	}//end of entity class FiscalMonthMapping

	[Table("MostRecentWorkflowViews", Schema = "dbo")]
	public partial class MostRecentWorkflowView : IRdbDataEntity, IValidate, IPreSave
	{
        public static readonly MostRecentWorkflowView[] None = new MostRecentWorkflowView[0];

		[DisplayName("Workflow View Id")]
		[Display(Name = "Workflow View Id")]
		[Column("WorkflowViewId")]
		public int WorkflowViewId { get; set; } 	

		[DisplayName("Workflow Id")]
		[Display(Name = "Workflow Id")]
		[Column("WorkflowId")]
		public int WorkflowId { get; set; } 	

		[DisplayName("User Id")]
		[Display(Name = "User Id")]
		[NotNull]
		[Required]
		[MaxLength(128)]
		[Column("UserId", TypeName="nvarchar(128)")]
		public string UserId { get; set; } 	

		[DisplayName("Action At Utc")]
		[Display(Name = "Action At Utc")]
		[DataType(DataType.DateTime)]
		[Column("ActionAtUtc")]
		public DateTime ActionAtUtc { get; set; } 	


		[DisplayName("Action At")]
		[NotMapped]
		[JsonIgnore]
		[DataType(DataType.DateTime)]
        [IgnoreDataMember]
		public DateTime ActionAt => ActionAtUtc.ToLocalTime();

		[DisplayName("View Action")]
		[Display(Name = "View Action")]
		[NotNull]
		[Required]
		[MaxLength(1)]
		[Column("ViewAction", TypeName="char(1)")]
		public string ViewAction { get; set; } 	

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public MostRecentWorkflowView()
			: this(null)
		{}

		public MostRecentWorkflowView(MostRecentWorkflowView other, bool copyKey=false)
		{
			if (other!=null)
			{
				WorkflowViewId = other.WorkflowViewId;
				WorkflowId = other.WorkflowId;
				UserId = other.UserId;
				ActionAtUtc = other.ActionAtUtc;
				ViewAction = other.ViewAction;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(UserId, nameof(UserId));
			Requires.Text(UserId, nameof(UserId), true, 0, 128);
			Requires.NonNull(ViewAction, nameof(ViewAction));
			Requires.Text(ViewAction, nameof(ViewAction), true, 0, 1);
			PartialValidate();
        }
	}//end of entity class MostRecentWorkflowView

	[Table("Notes", Schema = "dbo")]
	public partial class Note : IRdbDataEntity, IValidate, IPreSave, IPrimaryKey<int>
	{
        public static readonly Note[] None = new Note[0];


		//modelBuilder.Entity<Note>(e=>e.HasOne(r=>r.ParentNote).WithMany(u=>u.ParentNoteNotes).HasForeignKey(r=>r.ParentNoteId));
		[InverseProperty(nameof(Note.ParentNote))]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Note> ParentNoteNotes { get; set; } = new List<Note>();

		object IPrimaryKey.Key { get { return NoteId; }}
	
		int IPrimaryKey<int>.Key { get { return NoteId; }}

		[DisplayName("Note Id")]
		[Display(Name = "Note Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("NoteId")]
		public int NoteId { get; set; } 	

		[DisplayName("Parent Note Id")]
		[Display(Name = "Parent Note Id")]
		[Column("ParentNoteId")]
		public int? ParentNoteId { get; set; } 	

		//LinksTo:dbo.Notes
		[ForeignKey("ParentNoteId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Note ParentNote { get; set; } 

		[DisplayName("User Id")]
		[Display(Name = "User Id")]
		[MaxLength(128)]
		[Column("UserId", TypeName="nvarchar(128)")]
		public string UserId { get; set; } 	

		//LinksTo:dbo.AspNetUsers
		[ForeignKey("UserId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public AspNetUser User { get; set; } 

		[DisplayName("Ulo Id")]
		[Display(Name = "Ulo Id")]
		[Column("UloId")]
		public int UloId { get; set; } 	

		//LinksTo:dbo.UnliquidatedObligations
		[ForeignKey("UloId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public UnliquidatedObligation Ulo { get; set; } 

		[DisplayName("Body")]
		[Display(Name = "Body")]
		[Column("Body", TypeName="nvarchar(max)")]
		public string Body { get; set; } 	

		[DisplayName("Created At Utc")]
		[Display(Name = "Created At Utc")]
		[DataType(DataType.DateTime)]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; } = DateTime.UtcNow;	


		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
		[DataType(DataType.DateTime)]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Deleted At Utc")]
		[Display(Name = "Deleted At Utc")]
		[DataType(DataType.DateTime)]
		[Column("DeletedAtUtc")]
		public DateTime? DeletedAtUtc { get; set; } 	


		[DisplayName("Deleted At")]
		[NotMapped]
		[JsonIgnore]
		[DataType(DataType.DateTime)]
        [IgnoreDataMember]
		public DateTime? DeletedAt => DeletedAtUtc?.ToLocalTime();

		[DisplayName("Deleted By User Id")]
		[Display(Name = "Deleted By User Id")]
		[MaxLength(128)]
		[Column("DeletedByUserId", TypeName="nvarchar(128)")]
		public string DeletedByUserId { get; set; } 	

		//LinksTo:dbo.AspNetUsers
		[ForeignKey("DeletedByUserId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public AspNetUser DeletedByUser { get; set; } 

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} NoteId={NoteId} {extras}";
		}

		partial void OnConstructed();
	
		public Note()
			: this(null)
		{}

		public Note(Note other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					NoteId = other.NoteId;
				}
				ParentNoteNotes = other.ParentNoteNotes;
				ParentNoteId = other.ParentNoteId;
				UserId = other.UserId;
				UloId = other.UloId;
				Body = other.Body;
				DeletedAtUtc = other.DeletedAtUtc;
				DeletedByUserId = other.DeletedByUserId;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.Text(UserId, nameof(UserId), true, 0, 128);
			Requires.Text(DeletedByUserId, nameof(DeletedByUserId), true, 0, 128);
			PartialValidate();
        }
	}//end of entity class Note

	[Table("PdnAttributes", Schema = "dbo")]
	public partial class PdnAttribute : IRdbDataEntity, IValidate, IPreSave, IPrimaryKey<int>
	{
        public static readonly PdnAttribute[] None = new PdnAttribute[0];

		object IPrimaryKey.Key { get { return PdnAttributeId; }}
	
		int IPrimaryKey<int>.Key { get { return PdnAttributeId; }}

		[DisplayName("Pdn Attribute Id")]
		[Display(Name = "Pdn Attribute Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("PdnAttributeId")]
		public int PdnAttributeId { get; set; } 	

		[DisplayName("Pegasys Document Number")]
		[Display(Name = "Pegasys Document Number")]
		[NotNull]
		[Required]
		[MaxLength(50)]
		[Column("PegasysDocumentNumber", TypeName="varchar(50)")]
		public string PegasysDocumentNumber { get; set; } 	

		[DisplayName("Region Id")]
		[Display(Name = "Region Id")]
		[Column("RegionId")]
		public int? RegionId { get; set; } 	

		//LinksTo:gsa.Regions
		[ForeignKey("RegionId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Region Region { get; set; } 

		[DisplayName("Created At Utc")]
		[Display(Name = "Created At Utc")]
		[DataType(DataType.DateTime)]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; } = DateTime.UtcNow;	


		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
		[DataType(DataType.DateTime)]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Deleted At Utc")]
		[Display(Name = "Deleted At Utc")]
		[DataType(DataType.DateTime)]
		[Column("DeletedAtUtc")]
		public DateTime? DeletedAtUtc { get; set; } 	


		[DisplayName("Deleted At")]
		[NotMapped]
		[JsonIgnore]
		[DataType(DataType.DateTime)]
        [IgnoreDataMember]
		public DateTime? DeletedAt => DeletedAtUtc?.ToLocalTime();

		[DisplayName("Is Excluded")]
		[Display(Name = "Is Excluded")]
		[Column("IsExcluded")]
		public bool IsExcluded { get; set; } = false;	

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} PdnAttributeId={PdnAttributeId} {extras}";
		}

		partial void OnConstructed();
	
		public PdnAttribute()
			: this(null)
		{}

		public PdnAttribute(PdnAttribute other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					PdnAttributeId = other.PdnAttributeId;
				}
				PegasysDocumentNumber = other.PegasysDocumentNumber;
				RegionId = other.RegionId;
				DeletedAtUtc = other.DeletedAtUtc;
				IsExcluded = other.IsExcluded;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(PegasysDocumentNumber, nameof(PegasysDocumentNumber));
			Requires.Text(PegasysDocumentNumber, nameof(PegasysDocumentNumber), true, 0, 50);
			PartialValidate();
        }
	}//end of entity class PdnAttribute

	[Table("ReportDefinitions", Schema = "dbo")]
	public partial class ReportDefinition : IRdbDataEntity, IValidate, IPreSave, IPrimaryKey<int>
	{
        public static readonly ReportDefinition[] None = new ReportDefinition[0];

		object IPrimaryKey.Key { get { return ReportDefinitionId; }}
	
		int IPrimaryKey<int>.Key { get { return ReportDefinitionId; }}

		[DisplayName("Report Definition Id")]
		[Display(Name = "Report Definition Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("ReportDefinitionId")]
		public int ReportDefinitionId { get; set; } 	

		[DisplayName("Is Active")]
		[Display(Name = "Is Active")]
		[Column("IsActive")]
		public bool IsActive { get; set; } = false;	

		[DisplayName("Description Json")]
		[Display(Name = "Description Json")]
		[Column("DescriptionJson", TypeName="nvarchar(max)")]
		public string DescriptionJson { get; set; } 	

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} ReportDefinitionId={ReportDefinitionId} {extras}";
		}

		partial void OnConstructed();
	
		public ReportDefinition()
			: this(null)
		{}

		public ReportDefinition(ReportDefinition other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					ReportDefinitionId = other.ReportDefinitionId;
				}
				IsActive = other.IsActive;
				DescriptionJson = other.DescriptionJson;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			PartialValidate();
        }
	}//end of entity class ReportDefinition

	[Table("RequestForReassignment", Schema = "dbo")]
	public partial class RequestForReassignment : IRdbDataEntity, IValidate, IPreSave, IPrimaryKey<int>
	{
        public static readonly RequestForReassignment[] None = new RequestForReassignment[0];

		object IPrimaryKey.Key { get { return RequestForReassignmentID; }}
	
		int IPrimaryKey<int>.Key { get { return RequestForReassignmentID; }}

		[DisplayName("Request For Reassignment ID")]
		[Display(Name = "Request For Reassignment ID")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("RequestForReassignmentID")]
		public int RequestForReassignmentID { get; set; } 	

		[DisplayName("Suggested Reviewer Id")]
		[Display(Name = "Suggested Reviewer Id")]
		[MaxLength(128)]
		[Column("SuggestedReviewerId", TypeName="nvarchar(128)")]
		public string SuggestedReviewerId { get; set; } 	

		//LinksTo:dbo.AspNetUsers
		[ForeignKey("SuggestedReviewerId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public AspNetUser SuggestedReviewer { get; set; } 

		[DisplayName("Unliqudated Workflow Questions Id")]
		[Display(Name = "Unliqudated Workflow Questions Id")]
		[Column("UnliqudatedWorkflowQuestionsId")]
		public int? UnliqudatedWorkflowQuestionsId { get; set; } 	

		//LinksTo:dbo.UnliqudatedObjectsWorkflowQuestions
		[ForeignKey("UnliqudatedWorkflowQuestionsId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public UnliqudatedObjectsWorkflowQuestion UnliqudatedWorkflowQuestions { get; set; } 

		[DisplayName("Workflow Id")]
		[Display(Name = "Workflow Id")]
		[Column("WorkflowId")]
		public int WorkflowId { get; set; } 	

		//LinksTo:dbo.Workflows
		[ForeignKey("WorkflowId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Workflow Workflow { get; set; } 

		[DisplayName("Is Active")]
		[Display(Name = "Is Active")]
		[Column("IsActive")]
		public bool IsActive { get; set; } = true;	

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} RequestForReassignmentID={RequestForReassignmentID} {extras}";
		}

		partial void OnConstructed();
	
		public RequestForReassignment()
			: this(null)
		{}

		public RequestForReassignment(RequestForReassignment other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					RequestForReassignmentID = other.RequestForReassignmentID;
				}
				SuggestedReviewerId = other.SuggestedReviewerId;
				UnliqudatedWorkflowQuestionsId = other.UnliqudatedWorkflowQuestionsId;
				WorkflowId = other.WorkflowId;
				IsActive = other.IsActive;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.Text(SuggestedReviewerId, nameof(SuggestedReviewerId), true, 0, 128);
			PartialValidate();
        }
	}//end of entity class RequestForReassignment

	[Table("Reviews", Schema = "dbo")]
	public partial class Review : IRdbDataEntity, IValidate, IPreSave, IPrimaryKey<int>
	{
        public static readonly Review[] None = new Review[0];

		//skipped: dbo.ActiveCardholders

		//skipped: dbo.CreditCardAliases

		//skipped: dbo.PegasysOpenItemsCreditCards


		//modelBuilder.Entity<SemiAnnualSamplingStat>(e=>e.HasOne(r=>r.Review).WithMany(u=>u.ReviewSemiAnnualSamplingStats).HasForeignKey(r=>r.ReviewId));
		[InverseProperty(nameof(SemiAnnualSamplingStat.Review))]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<SemiAnnualSamplingStat> ReviewSemiAnnualSamplingStats { get; set; } = new List<SemiAnnualSamplingStat>();


		//modelBuilder.Entity<UnliquidatedObligation>(e=>e.HasOne(r=>r.Review).WithMany(u=>u.ReviewUnliquidatedObligations).HasForeignKey(r=>r.ReviewId));
		[InverseProperty(nameof(UnliquidatedObligation.Review))]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<UnliquidatedObligation> ReviewUnliquidatedObligations { get; set; } = new List<UnliquidatedObligation>();

		[DisplayName("Region Id")]
		[Display(Name = "Region Id")]
		[Column("RegionId")]
		public int? RegionId { get; set; } 	

		//LinksTo:gsa.Regions
		[ForeignKey("RegionId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Region Region { get; set; } 

		[DisplayName("Review Name")]
		[Display(Name = "Review Name")]
		[MaxLength(100)]
		[Column("ReviewName", TypeName="varchar(100)")]
		public string ReviewName { get; set; } 	

		[DisplayName("Status")]
		[Display(Name = "Status")]
		[MaxLength(100)]
		[Column("Status", TypeName="varchar(100)")]
		public string Status { get; set; } 	

		[DisplayName("Comments")]
		[Display(Name = "Comments")]
		[MaxLength(500)]
		[Column("Comments", TypeName="varchar(500)")]
		public string Comments { get; set; } 	

		object IPrimaryKey.Key { get { return ReviewId; }}
	
		int IPrimaryKey<int>.Key { get { return ReviewId; }}

		[DisplayName("Review Id")]
		[Display(Name = "Review Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("ReviewId")]
		public int ReviewId { get; set; } 	

		[DisplayName("Created At Utc")]
		[Display(Name = "Created At Utc")]
		[DataType(DataType.DateTime)]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; } = DateTime.UtcNow;	


		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
		[DataType(DataType.DateTime)]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Review Type Id")]
		[Display(Name = "Review Type Id")]
		[NotMapped]
		public ReviewTypeEnum ReviewTypeId
        {
            get => (ReviewTypeEnum) ReviewTypeIdRawValue;
            set { ReviewTypeIdRawValue = (int)value; }
        }

		[Column("ReviewTypeId")]
		public int ReviewTypeIdRawValue { get; set; } = 1;	

		[DisplayName("Review Scope Id")]
		[Display(Name = "Review Scope Id")]
		[NotMapped]
		public ReviewScopeEnum ReviewScopeId
        {
            get => (ReviewScopeEnum) ReviewScopeIdRawValue;
            set { ReviewScopeIdRawValue = (int)value; }
        }

		[Column("ReviewScopeId")]
		public int ReviewScopeIdRawValue { get; set; } = 1;	

		[DisplayName("Workflow Definition Id")]
		[Display(Name = "Workflow Definition Id")]
		[Column("WorkflowDefinitionId")]
		public int WorkflowDefinitionId { get; set; } 	

		//LinksTo:dbo.WorkflowDefinitions
		[ForeignKey("WorkflowDefinitionId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public WorkflowDefinition WorkflowDefinition { get; set; } 

		[DisplayName("Project Due Date")]
		[Display(Name = "Project Due Date")]
		[DataType(DataType.DateTime)]
		[Column("ProjectDueDate")]
		public DateTime? ProjectDueDate { get; set; } 	

		[DisplayName("Review Date Initiated")]
		[Display(Name = "Review Date Initiated")]
		[DataType(DataType.Date)]
		[Column("ReviewDateInitiated")]
		public DateTime? ReviewDateInitiated { get; set; } 	

		[DisplayName("Is Closed")]
		[Display(Name = "Is Closed")]
		[Column("IsClosed")]
		public bool IsClosed { get; set; } = false;	

		[DisplayName("Deleted At Utc")]
		[Display(Name = "Deleted At Utc")]
		[DataType(DataType.DateTime)]
		[Column("DeletedAtUtc")]
		public DateTime? DeletedAtUtc { get; set; } 	


		[DisplayName("Deleted At")]
		[NotMapped]
		[JsonIgnore]
		[DataType(DataType.DateTime)]
        [IgnoreDataMember]
		public DateTime? DeletedAt => DeletedAtUtc?.ToLocalTime();

		[DisplayName("Deleted By User Id")]
		[Display(Name = "Deleted By User Id")]
		[MaxLength(128)]
		[Column("DeletedByUserId", TypeName="nvarchar(128)")]
		public string DeletedByUserId { get; set; } 	

		//LinksTo:dbo.AspNetUsers
		[ForeignKey("DeletedByUserId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public AspNetUser DeletedByUser { get; set; } 

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} ReviewId={ReviewId} {extras}";
		}

		partial void OnConstructed();
	
		public Review()
			: this(null)
		{}

		public Review(Review other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					ReviewId = other.ReviewId;
				}
				ReviewSemiAnnualSamplingStats = other.ReviewSemiAnnualSamplingStats;
				ReviewUnliquidatedObligations = other.ReviewUnliquidatedObligations;
				RegionId = other.RegionId;
				ReviewName = other.ReviewName;
				Status = other.Status;
				Comments = other.Comments;
				ReviewTypeIdRawValue = other.ReviewTypeIdRawValue;
				ReviewScopeIdRawValue = other.ReviewScopeIdRawValue;
				WorkflowDefinitionId = other.WorkflowDefinitionId;
				ProjectDueDate = other.ProjectDueDate;
				ReviewDateInitiated = other.ReviewDateInitiated;
				IsClosed = other.IsClosed;
				DeletedAtUtc = other.DeletedAtUtc;
				DeletedByUserId = other.DeletedByUserId;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.Text(ReviewName, nameof(ReviewName), true, 0, 100);
			Requires.Text(Status, nameof(Status), true, 0, 100);
			Requires.Text(Comments, nameof(Comments), true, 0, 500);
			Requires.Text(DeletedByUserId, nameof(DeletedByUserId), true, 0, 128);
			PartialValidate();
        }
	}//end of entity class Review

	[Table("ReviewStats", Schema = "dbo")]
	public partial class ReviewStat : IRdbDataEntity, IValidate, IPreSave
	{
        public static readonly ReviewStat[] None = new ReviewStat[0];

		[DisplayName("Review Id")]
		[Display(Name = "Review Id")]
		[Column("ReviewId")]
		public int ReviewId { get; set; } 	

		[DisplayName("Easi Cnt")]
		[Display(Name = "Easi Cnt")]
		[Column("EasiCnt")]
		public int? EasiCnt { get; set; } 	

		[DisplayName("Reta Cnt")]
		[Display(Name = "Reta Cnt")]
		[Column("RetaCnt")]
		public int? RetaCnt { get; set; } 	

		[DisplayName("Pegasys Obligations192 Cnt")]
		[Display(Name = "Pegasys Obligations192 Cnt")]
		[Column("PegasysObligations192Cnt")]
		public int? PegasysObligations192Cnt { get; set; } 	

		[DisplayName("Pegasys Obligations442 Cnt")]
		[Display(Name = "Pegasys Obligations442 Cnt")]
		[Column("PegasysObligations442Cnt")]
		public int? PegasysObligations442Cnt { get; set; } 	

		[DisplayName("Credit Card Aliases Cnt")]
		[Display(Name = "Credit Card Aliases Cnt")]
		[Column("CreditCardAliasesCnt")]
		public int? CreditCardAliasesCnt { get; set; } 	

		[DisplayName("Active Cardholders Cnt")]
		[Display(Name = "Active Cardholders Cnt")]
		[Column("ActiveCardholdersCnt")]
		public int? ActiveCardholdersCnt { get; set; } 	

		[DisplayName("Pegasys Open Items Credit Cards Cnt")]
		[Display(Name = "Pegasys Open Items Credit Cards Cnt")]
		[Column("PegasysOpenItemsCreditCardsCnt")]
		public int? PegasysOpenItemsCreditCardsCnt { get; set; } 	

		[DisplayName("Ulo Cnt")]
		[Display(Name = "Ulo Cnt")]
		[Column("UloCnt")]
		public int? UloCnt { get; set; } 	

		[DisplayName("Person Cnt")]
		[Display(Name = "Person Cnt")]
		[Column("PersonCnt")]
		public int? PersonCnt { get; set; } 	

		[DisplayName("Group Cnt")]
		[Display(Name = "Group Cnt")]
		[Column("GroupCnt")]
		public int? GroupCnt { get; set; } 	

		[DisplayName("System Cnt")]
		[Display(Name = "System Cnt")]
		[Column("SystemCnt")]
		public int? SystemCnt { get; set; } 	

		[DisplayName("Pre Assignment Cnt")]
		[Display(Name = "Pre Assignment Cnt")]
		[Column("PreAssignmentCnt")]
		public int? PreAssignmentCnt { get; set; } 	

		[DisplayName("The Closer Cnt")]
		[Display(Name = "The Closer Cnt")]
		[Column("TheCloserCnt")]
		public int? TheCloserCnt { get; set; } 	

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public ReviewStat()
			: this(null)
		{}

		public ReviewStat(ReviewStat other, bool copyKey=false)
		{
			if (other!=null)
			{
				ReviewId = other.ReviewId;
				EasiCnt = other.EasiCnt;
				RetaCnt = other.RetaCnt;
				PegasysObligations192Cnt = other.PegasysObligations192Cnt;
				PegasysObligations442Cnt = other.PegasysObligations442Cnt;
				CreditCardAliasesCnt = other.CreditCardAliasesCnt;
				ActiveCardholdersCnt = other.ActiveCardholdersCnt;
				PegasysOpenItemsCreditCardsCnt = other.PegasysOpenItemsCreditCardsCnt;
				UloCnt = other.UloCnt;
				PersonCnt = other.PersonCnt;
				GroupCnt = other.GroupCnt;
				SystemCnt = other.SystemCnt;
				PreAssignmentCnt = other.PreAssignmentCnt;
				TheCloserCnt = other.TheCloserCnt;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			PartialValidate();
        }
	}//end of entity class ReviewStat

	[Table("SemiAnnualSamplingStats", Schema = "dbo")]
	public partial class SemiAnnualSamplingStat : IRdbDataEntity, IValidate, IPreSave, IPrimaryKey<int>
	{
        public static readonly SemiAnnualSamplingStat[] None = new SemiAnnualSamplingStat[0];

		object IPrimaryKey.Key { get { return SamplingId; }}
	
		int IPrimaryKey<int>.Key { get { return SamplingId; }}

		[DisplayName("Sampling Id")]
		[Display(Name = "Sampling Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("SamplingId")]
		public int SamplingId { get; set; } 	

		[DisplayName("Review Id")]
		[Display(Name = "Review Id")]
		[Column("ReviewId")]
		public int? ReviewId { get; set; } 	

		//LinksTo:dbo.Reviews
		[ForeignKey("ReviewId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Review Review { get; set; } 

		[DisplayName("Region Id")]
		[Display(Name = "Region Id")]
		[Column("RegionId")]
		public int RegionId { get; set; } 	

		[DisplayName("Bin Id")]
		[Display(Name = "Bin Id")]
		[Column("BinId")]
		public int BinId { get; set; } 	

		[DisplayName("Type Id")]
		[Display(Name = "Type Id")]
		[NotNull]
		[Required]
		[MaxLength(2)]
		[Column("TypeId", TypeName="varchar(2)")]
		public string TypeId { get; set; } 	

		[DisplayName("Bucket")]
		[Display(Name = "Bucket")]
		[NotNull]
		[Required]
		[MaxLength(10)]
		[Column("Bucket", TypeName="varchar(10)")]
		public string Bucket { get; set; } 	

		[DisplayName("Total Size")]
		[Display(Name = "Total Size")]
		[Column("TotalSize")]
		public int TotalSize { get; set; } 	

		[DisplayName("Total Amount")]
		[Display(Name = "Total Amount")]
		[DataType(DataType.Currency)]
		[Column("TotalAmount", TypeName="money(0, 0)")]
		public decimal TotalAmount { get; set; } 	

		[DisplayName("Threshold Amount")]
		[Display(Name = "Threshold Amount")]
		[DataType(DataType.Currency)]
		[Column("ThresholdAmount", TypeName="money(0, 0)")]
		public decimal ThresholdAmount { get; set; } 	

		[DisplayName("Sample Size")]
		[Display(Name = "Sample Size")]
		[Column("SampleSize")]
		public int SampleSize { get; set; } 	

		[DisplayName("Sample Amount")]
		[Display(Name = "Sample Amount")]
		[DataType(DataType.Currency)]
		[Column("SampleAmount", TypeName="money(0, 0)")]
		public decimal SampleAmount { get; set; } 	

		[DisplayName("Sampling Percentage")]
		[Display(Name = "Sampling Percentage")]
		[Column("SamplingPercentage", TypeName="decimal(0, 0)")]
		public decimal SamplingPercentage { get; set; } 	

		[DisplayName("Reason In Review")]
		[Display(Name = "Reason In Review")]
		[MaxLength(500)]
		[Column("ReasonInReview", TypeName="nvarchar(500)")]
		public string ReasonInReview { get; set; } 	

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} SamplingId={SamplingId} {extras}";
		}

		partial void OnConstructed();
	
		public SemiAnnualSamplingStat()
			: this(null)
		{}

		public SemiAnnualSamplingStat(SemiAnnualSamplingStat other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					SamplingId = other.SamplingId;
				}
				ReviewId = other.ReviewId;
				RegionId = other.RegionId;
				BinId = other.BinId;
				TypeId = other.TypeId;
				Bucket = other.Bucket;
				TotalSize = other.TotalSize;
				TotalAmount = other.TotalAmount;
				ThresholdAmount = other.ThresholdAmount;
				SampleSize = other.SampleSize;
				SampleAmount = other.SampleAmount;
				SamplingPercentage = other.SamplingPercentage;
				ReasonInReview = other.ReasonInReview;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(TypeId, nameof(TypeId));
			Requires.Text(TypeId, nameof(TypeId), true, 0, 2);
			Requires.NonNull(Bucket, nameof(Bucket));
			Requires.Text(Bucket, nameof(Bucket), true, 0, 10);
			Requires.Text(ReasonInReview, nameof(ReasonInReview), true, 0, 500);
			PartialValidate();
        }
	}//end of entity class SemiAnnualSamplingStat

	[Table("UnliqudatedObjectsWorkflowQuestions", Schema = "dbo")]
	public partial class UnliqudatedObjectsWorkflowQuestion : IRdbDataEntity, IValidate, IPreSave, IPrimaryKey<int>
	{
        public static readonly UnliqudatedObjectsWorkflowQuestion[] None = new UnliqudatedObjectsWorkflowQuestion[0];


		//modelBuilder.Entity<RequestForReassignment>(e=>e.HasOne(r=>r.UnliqudatedWorkflowQuestions).WithMany(u=>u.UnliqudatedWorkflowQuestionsRequestForReassignments).HasForeignKey(r=>r.UnliqudatedWorkflowQuestionsId));
		[InverseProperty(nameof(RequestForReassignment.UnliqudatedWorkflowQuestions))]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<RequestForReassignment> UnliqudatedWorkflowQuestionsRequestForReassignments { get; set; } = new List<RequestForReassignment>();

		object IPrimaryKey.Key { get { return UnliqudatedWorkflowQuestionsId; }}
	
		int IPrimaryKey<int>.Key { get { return UnliqudatedWorkflowQuestionsId; }}

		[DisplayName("Unliqudated Workflow Questions Id")]
		[Display(Name = "Unliqudated Workflow Questions Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("UnliqudatedWorkflowQuestionsId")]
		public int UnliqudatedWorkflowQuestionsId { get; set; } 	

		[DisplayName("Workflow Id")]
		[Display(Name = "Workflow Id")]
		[Column("WorkflowId")]
		public int WorkflowId { get; set; } 	

		//LinksTo:dbo.Workflows
		[ForeignKey("WorkflowId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Workflow Workflow { get; set; } 

		[DisplayName("User Id")]
		[Display(Name = "User Id")]
		[NotNull]
		[Required]
		[MaxLength(128)]
		[Column("UserId", TypeName="nvarchar(128)")]
		public string UserId { get; set; } 	

		//LinksTo:dbo.AspNetUsers
		[ForeignKey("UserId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public AspNetUser User { get; set; } 

		[DisplayName("Answer")]
		[Display(Name = "Answer")]
		[MaxLength(100)]
		[Column("Answer", TypeName="varchar(100)")]
		public string Answer { get; set; } 	

		[DisplayName("Pending")]
		[Display(Name = "Pending")]
		[Column("Pending")]
		public bool Pending { get; set; } 	

		[DisplayName("Workflow Row Version")]
		[Display(Name = "Workflow Row Version")]
		[Column("WorkflowRowVersion", TypeName="binary(8)")]
		public byte[] WorkflowRowVersion { get; set; } 	

		[DisplayName("Created At Utc")]
		[Display(Name = "Created At Utc")]
		[DataType(DataType.DateTime)]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; } = DateTime.UtcNow;	


		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
		[DataType(DataType.DateTime)]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Justification Key")]
		[Display(Name = "Justification Key")]
		[MaxLength(80)]
		[Column("JustificationKey", TypeName="varchar(80)")]
		public string JustificationKey { get; set; } 	

		[DisplayName("Comments")]
		[Display(Name = "Comments")]
		[MaxLength(4000)]
		[Column("Comments", TypeName="nvarchar(4000)")]
		public string Comments { get; set; } 	

		[DisplayName("Is Answer Reassignment")]
		[Display(Name = "Is Answer Reassignment")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("IsAnswerReassignment")]
		public bool? IsAnswerReassignment { get; set; } 	

		[DisplayName("Is Answer Question Comment")]
		[Display(Name = "Is Answer Question Comment")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("IsAnswerQuestionComment")]
		public bool? IsAnswerQuestionComment { get; set; } 	

		[DisplayName("Is Answer Real")]
		[Display(Name = "Is Answer Real")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("IsAnswerReal")]
		public bool? IsAnswerReal { get; set; } 	

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} UnliqudatedWorkflowQuestionsId={UnliqudatedWorkflowQuestionsId} {extras}";
		}

		partial void OnConstructed();
	
		public UnliqudatedObjectsWorkflowQuestion()
			: this(null)
		{}

		public UnliqudatedObjectsWorkflowQuestion(UnliqudatedObjectsWorkflowQuestion other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					UnliqudatedWorkflowQuestionsId = other.UnliqudatedWorkflowQuestionsId;
				}
				UnliqudatedWorkflowQuestionsRequestForReassignments = other.UnliqudatedWorkflowQuestionsRequestForReassignments;
				WorkflowId = other.WorkflowId;
				UserId = other.UserId;
				Answer = other.Answer;
				Pending = other.Pending;
				WorkflowRowVersion = other.WorkflowRowVersion;
				JustificationKey = other.JustificationKey;
				Comments = other.Comments;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(UserId, nameof(UserId));
			Requires.Text(UserId, nameof(UserId), true, 0, 128);
			Requires.Text(Answer, nameof(Answer), true, 0, 100);
			Requires.Text(JustificationKey, nameof(JustificationKey), true, 0, 80);
			Requires.Text(Comments, nameof(Comments), true, 0, 4000);
			PartialValidate();
        }
	}//end of entity class UnliqudatedObjectsWorkflowQuestion

	[Table("UnliquidatedObligations", Schema = "dbo")]
	public partial class UnliquidatedObligation : IRdbDataEntity, IValidate, IPreSave, IPrimaryKey<int>
	{
        public static readonly UnliquidatedObligation[] None = new UnliquidatedObligation[0];


		//modelBuilder.Entity<FinancialActivity>(e=>e.HasOne(r=>r.Ulo).WithMany(u=>u.UloFinancialActivitys).HasForeignKey(r=>r.UloId));
		[InverseProperty(nameof(FinancialActivity.Ulo))]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<FinancialActivity> UloFinancialActivitys { get; set; } = new List<FinancialActivity>();


		//modelBuilder.Entity<Workflow>(e=>e.HasOne(r=>r.TargetUlo).WithMany(u=>u.TargetUloWorkflows).HasForeignKey(r=>r.TargetUloId));
		[InverseProperty(nameof(Workflow.TargetUlo))]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Workflow> TargetUloWorkflows { get; set; } = new List<Workflow>();


		//modelBuilder.Entity<Note>(e=>e.HasOne(r=>r.Ulo).WithMany(u=>u.UloNotes).HasForeignKey(r=>r.UloId));
		[InverseProperty(nameof(Note.Ulo))]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Note> UloNotes { get; set; } = new List<Note>();

		object IPrimaryKey.Key { get { return UloId; }}
	
		int IPrimaryKey<int>.Key { get { return UloId; }}

		[DisplayName("Ulo Id")]
		[Display(Name = "Ulo Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("UloId")]
		public int UloId { get; set; } 	

		[DisplayName("Region Id")]
		[Display(Name = "Region Id")]
		[Column("RegionId")]
		public int? RegionId { get; set; } 	

		//LinksTo:gsa.Regions
		[ForeignKey("RegionId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Region Region { get; set; } 

		[DisplayName("Review Id")]
		[Display(Name = "Review Id")]
		[Column("ReviewId")]
		public int ReviewId { get; set; } 	

		//LinksTo:dbo.Reviews
		[ForeignKey("ReviewId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Review Review { get; set; } 

		[DisplayName("Organization")]
		[Display(Name = "Organization")]
		[MaxLength(50)]
		[Column("Organization", TypeName="varchar(50)")]
		public string Organization { get; set; } 	

		[DisplayName("Fund")]
		[Display(Name = "Fund")]
		[MaxLength(50)]
		[Column("Fund", TypeName="varchar(50)")]
		public string Fund { get; set; } 	

		[DisplayName("Prog")]
		[Display(Name = "Prog")]
		[MaxLength(50)]
		[Column("Prog", TypeName="varchar(50)")]
		public string Prog { get; set; } 	

		[DisplayName("Doc Type")]
		[Display(Name = "Doc Type")]
		[MaxLength(50)]
		[Column("DocType", TypeName="varchar(50)")]
		public string DocType { get; set; } 	

		[DisplayName("Pegasys Document Number")]
		[Display(Name = "Pegasys Document Number")]
		[MaxLength(50)]
		[Column("PegasysDocumentNumber", TypeName="varchar(50)")]
		public string PegasysDocumentNumber { get; set; } 	

		[DisplayName("Pegasys Title Number")]
		[Display(Name = "Pegasys Title Number")]
		[MaxLength(100)]
		[Column("PegasysTitleNumber", TypeName="varchar(100)")]
		public string PegasysTitleNumber { get; set; } 	

		[DisplayName("BBFY")]
		[Display(Name = "BBFY")]
		[MaxLength(10)]
		[Column("BBFY", TypeName="varchar(10)")]
		public string BBFY { get; set; } 	

		[DisplayName("EBFY")]
		[Display(Name = "EBFY")]
		[MaxLength(10)]
		[Column("EBFY", TypeName="varchar(10)")]
		public string EBFY { get; set; } 	

		[DisplayName("Acty")]
		[Display(Name = "Acty")]
		[MaxLength(10)]
		[Column("Acty", TypeName="varchar(10)")]
		public string Acty { get; set; } 	

		[DisplayName("SOC")]
		[Display(Name = "SOC")]
		[MaxLength(100)]
		[Column("SOC", TypeName="varchar(100)")]
		public string SOC { get; set; } 	

		[DisplayName("Project")]
		[Display(Name = "Project")]
		[MaxLength(100)]
		[Column("Project", TypeName="varchar(100)")]
		public string Project { get; set; } 	

		[DisplayName("Agreement")]
		[Display(Name = "Agreement")]
		[MaxLength(50)]
		[Column("Agreement", TypeName="varchar(50)")]
		public string Agreement { get; set; } 	

		[DisplayName("Contract Num")]
		[Display(Name = "Contract Num")]
		[MaxLength(100)]
		[Column("ContractNum", TypeName="varchar(100)")]
		public string ContractNum { get; set; } 	

		[DisplayName("Bldg")]
		[Display(Name = "Bldg")]
		[MaxLength(50)]
		[Column("Bldg", TypeName="varchar(50)")]
		public string Bldg { get; set; } 	

		[DisplayName("Sys Loc")]
		[Display(Name = "Sys Loc")]
		[MaxLength(50)]
		[Column("SysLoc", TypeName="varchar(50)")]
		public string SysLoc { get; set; } 	

		[DisplayName("Veh Tag")]
		[Display(Name = "Veh Tag")]
		[MaxLength(50)]
		[Column("VehTag", TypeName="varchar(50)")]
		public string VehTag { get; set; } 	

		[DisplayName("WI")]
		[Display(Name = "WI")]
		[Column("WI")]
		public int? WI { get; set; } 	

		[DisplayName("Lease Number")]
		[Display(Name = "Lease Number")]
		[MaxLength(50)]
		[Column("LeaseNumber", TypeName="varchar(50)")]
		public string LeaseNumber { get; set; } 	

		[DisplayName("Vendor Name")]
		[Display(Name = "Vendor Name")]
		[MaxLength(100)]
		[Column("VendorName", TypeName="varchar(100)")]
		public string VendorName { get; set; } 	

		[DisplayName("Actg Pd")]
		[Display(Name = "Actg Pd")]
		[MaxLength(50)]
		[Column("ActgPd", TypeName="varchar(50)")]
		public string ActgPd { get; set; } 	

		[DisplayName("TAFS")]
		[Display(Name = "TAFS")]
		[MaxLength(50)]
		[Column("TAFS", TypeName="varchar(50)")]
		public string TAFS { get; set; } 	

		[DisplayName("DUNSNum")]
		[Display(Name = "DUNSNum")]
		[MaxLength(50)]
		[Column("DUNSNum", TypeName="varchar(50)")]
		public string DUNSNum { get; set; } 	

		[DisplayName("Days Since Last Activity")]
		[Display(Name = "Days Since Last Activity")]
		[Column("DaysSinceLastActivity")]
		public int? DaysSinceLastActivity { get; set; } 	

		[DisplayName("Days Since First Activity")]
		[Display(Name = "Days Since First Activity")]
		[Column("DaysSinceFirstActivity")]
		public int? DaysSinceFirstActivity { get; set; } 	

		[DisplayName("Trading Partner Type")]
		[Display(Name = "Trading Partner Type")]
		[MaxLength(50)]
		[Column("TradingPartnerType", TypeName="varchar(50)")]
		public string TradingPartnerType { get; set; } 	

		[DisplayName("Vendor Agency Code")]
		[Display(Name = "Vendor Agency Code")]
		[MaxLength(50)]
		[Column("VendorAgencyCode", TypeName="varchar(50)")]
		public string VendorAgencyCode { get; set; } 	

		[DisplayName("Vendor Bureau Code")]
		[Display(Name = "Vendor Bureau Code")]
		[MaxLength(50)]
		[Column("VendorBureauCode", TypeName="varchar(50)")]
		public string VendorBureauCode { get; set; } 	

		[DisplayName("  Temp")]
		[Display(Name = "  Temp")]
		[Column("_Temp")]
		public bool? _Temp { get; set; } //= ((0));	

		[DisplayName("Status")]
		[Display(Name = "Status")]
		[MaxLength(50)]
		[Column("Status", TypeName="varchar(50)")]
		public string Status { get; set; } 	

		[DisplayName("Award Nbr")]
		[Display(Name = "Award Nbr")]
		[MaxLength(50)]
		[Column("AwardNbr", TypeName="varchar(50)")]
		public string AwardNbr { get; set; } 	

		[DisplayName("Contracting Officers Name")]
		[Display(Name = "Contracting Officers Name")]
		[MaxLength(50)]
		[Column("ContractingOfficersName", TypeName="varchar(50)")]
		public string ContractingOfficersName { get; set; } 	

		[DisplayName("Reason Included In Review")]
		[Display(Name = "Reason Included In Review")]
		[MaxLength(500)]
		[Column("ReasonIncludedInReview", TypeName="nvarchar(500)")]
		public string ReasonIncludedInReview { get; set; } 	

		[DisplayName("EASi  Base  Contract  Nbr")]
		[Display(Name = "EASi  Base  Contract  Nbr")]
		[MaxLength(50)]
		[Column("EASi Base Contract Nbr", TypeName="varchar(50)")]
		public string EASi_Base_Contract_Nbr { get; set; } 	

		[DisplayName("EASi  GSA FSS Other  ")]
		[Display(Name = "EASi  GSA FSS Other  ")]
		[MaxLength(50)]
		[Column("EASi GSA FSS/Other #", TypeName="varchar(50)")]
		public string EASi_GSA_FSS_Other__ { get; set; } 	

		[DisplayName("Expected Date For Completion")]
		[Display(Name = "Expected Date For Completion")]
		[DataType(DataType.Date)]
		[Column("ExpectedDateForCompletion")]
		public DateTime? ExpectedDateForCompletion { get; set; } 	

		[DisplayName("Total Line")]
		[Display(Name = "Total Line")]
		[DataType(DataType.Currency)]
		[Column("TotalLine", TypeName="money(0, 0)")]
		public decimal? TotalLine { get; set; } 	

		[DisplayName("Commitments")]
		[Display(Name = "Commitments")]
		[DataType(DataType.Currency)]
		[Column("Commitments", TypeName="money(0, 0)")]
		public decimal? Commitments { get; set; } 	

		[DisplayName("Prepayments")]
		[Display(Name = "Prepayments")]
		[DataType(DataType.Currency)]
		[Column("Prepayments", TypeName="money(0, 0)")]
		public decimal? Prepayments { get; set; } 	

		[DisplayName("Undel Orders")]
		[Display(Name = "Undel Orders")]
		[DataType(DataType.Currency)]
		[Column("UndelOrders", TypeName="money(0, 0)")]
		public decimal? UndelOrders { get; set; } 	

		[DisplayName("Rcpt")]
		[Display(Name = "Rcpt")]
		[DataType(DataType.Currency)]
		[Column("Rcpt", TypeName="money(0, 0)")]
		public decimal? Rcpt { get; set; } 	

		[DisplayName("Accrual")]
		[Display(Name = "Accrual")]
		[DataType(DataType.Currency)]
		[Column("Accrual", TypeName="money(0, 0)")]
		public decimal? Accrual { get; set; } 	

		[DisplayName("Total DO")]
		[Display(Name = "Total DO")]
		[DataType(DataType.Currency)]
		[Column("TotalDO", TypeName="money(0, 0)")]
		public decimal? TotalDO { get; set; } 	

		[DisplayName("Total UDOAnd DO")]
		[Display(Name = "Total UDOAnd DO")]
		[DataType(DataType.Currency)]
		[Column("TotalUDOAndDO", TypeName="money(0, 0)")]
		public decimal? TotalUDOAndDO { get; set; } 	

		[DisplayName("Pend Payments")]
		[Display(Name = "Pend Payments")]
		[DataType(DataType.Currency)]
		[Column("PendPayments", TypeName="money(0, 0)")]
		public decimal? PendPayments { get; set; } 	

		[DisplayName("Pymts In Transit")]
		[Display(Name = "Pymts In Transit")]
		[DataType(DataType.Currency)]
		[Column("PymtsInTransit", TypeName="money(0, 0)")]
		public decimal? PymtsInTransit { get; set; } 	

		[DisplayName("Pymts Confirmed")]
		[Display(Name = "Pymts Confirmed")]
		[DataType(DataType.Currency)]
		[Column("PymtsConfirmed", TypeName="money(0, 0)")]
		public decimal? PymtsConfirmed { get; set; } 	

		[DisplayName("Holdbacks")]
		[Display(Name = "Holdbacks")]
		[DataType(DataType.Currency)]
		[Column("Holdbacks", TypeName="money(0, 0)")]
		public decimal? Holdbacks { get; set; } 	

		[DisplayName("Date Of Last Activity")]
		[Display(Name = "Date Of Last Activity")]
		[DataType(DataType.Date)]
		[Column("DateOfLastActivity")]
		public DateTime? DateOfLastActivity { get; set; } 	

		[DisplayName("Date Of First Activity")]
		[Display(Name = "Date Of First Activity")]
		[DataType(DataType.Date)]
		[Column("DateOfFirstActivity")]
		public DateTime? DateOfFirstActivity { get; set; } 	

		[DisplayName("RWACompletion Date")]
		[Display(Name = "RWACompletion Date")]
		[DataType(DataType.Date)]
		[Column("RWACompletionDate")]
		public DateTime? RWACompletionDate { get; set; } 	

		[DisplayName("EASi Awd Expiration Date")]
		[Display(Name = "EASi Awd Expiration Date")]
		[DataType(DataType.Date)]
		[Column("EASiAwdExpirationDate")]
		public DateTime? EASiAwdExpirationDate { get; set; } 	

		[DisplayName("Items Line Number")]
		[Display(Name = "Items Line Number")]
		[Column("ItemsLineNumber")]
		public int? ItemsLineNumber { get; set; } 	

		[DisplayName("Accounting Line Number")]
		[Display(Name = "Accounting Line Number")]
		[Column("AccountingLineNumber")]
		public int? AccountingLineNumber { get; set; } 	

		[DisplayName("OC")]
		[Display(Name = "OC")]
		[Column("OC")]
		public int? OC { get; set; } 	

		[DisplayName("Contracting Officer Email")]
		[Display(Name = "Contracting Officer Email")]
		[DataType(DataType.EmailAddress)]
		[MaxLength(254)]
		[Column("ContractingOfficerEmail", TypeName="varchar(254)")]
		public string ContractingOfficerEmail { get; set; } //= (NULL);	

		[DisplayName("Contracting Specialist Name")]
		[Display(Name = "Contracting Specialist Name")]
		[MaxLength(100)]
		[Column("ContractingSpecialistName", TypeName="nvarchar(100)")]
		public string ContractingSpecialistName { get; set; } //= (NULL);	

		[DisplayName("Contracting Specialist Email")]
		[Display(Name = "Contracting Specialist Email")]
		[DataType(DataType.EmailAddress)]
		[MaxLength(254)]
		[Column("ContractingSpecialistEmail", TypeName="varchar(254)")]
		public string ContractingSpecialistEmail { get; set; } //= (NULL);	

		[DisplayName("Budget Analyst Email")]
		[Display(Name = "Budget Analyst Email")]
		[DataType(DataType.EmailAddress)]
		[MaxLength(254)]
		[Column("BudgetAnalystEmail", TypeName="varchar(254)")]
		public string BudgetAnalystEmail { get; set; } //= (NULL);	

		[DisplayName("Valid")]
		[Display(Name = "Valid")]
		[Column("Valid")]
		public bool? Valid { get; set; } //= (NULL);	

		[DisplayName("Cardholder Name")]
		[Display(Name = "Cardholder Name")]
		[MaxLength(155)]
		[Column("CardholderName", TypeName="varchar(155)")]
		public string CardholderName { get; set; } 	

		[DisplayName("Cardholder Alias8")]
		[Display(Name = "Cardholder Alias8")]
		[MaxLength(8)]
		[Column("CardholderAlias8", TypeName="varchar(8)")]
		public string CardholderAlias8 { get; set; } 	

		[DisplayName("Cardholder Alias")]
		[Display(Name = "Cardholder Alias")]
		[MaxLength(50)]
		[Column("CardholderAlias", TypeName="varchar(50)")]
		public string CardholderAlias { get; set; } 	

		[DisplayName("Cardholder Email")]
		[Display(Name = "Cardholder Email")]
		[DataType(DataType.EmailAddress)]
		[MaxLength(254)]
		[Column("CardholderEmail", TypeName="varchar(254)")]
		public string CardholderEmail { get; set; } 	

		[DisplayName("Cardholder User Id")]
		[Display(Name = "Cardholder User Id")]
		[MaxLength(128)]
		[Column("CardholderUserId", TypeName="nvarchar(128)")]
		public string CardholderUserId { get; set; } 	

		//LinksTo:dbo.AspNetUsers
		[ForeignKey("CardholderUserId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public AspNetUser CardholderUser { get; set; } 

		[DisplayName("Pegasys Document Number Instance")]
		[Display(Name = "Pegasys Document Number Instance")]
		[Column("PegasysDocumentNumberInstance")]
		public int? PegasysDocumentNumberInstance { get; set; } 	

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} UloId={UloId} {extras}";
		}

		partial void OnConstructed();
	
		public UnliquidatedObligation()
			: this(null)
		{}

		public UnliquidatedObligation(UnliquidatedObligation other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					UloId = other.UloId;
				}
				UloFinancialActivitys = other.UloFinancialActivitys;
				TargetUloWorkflows = other.TargetUloWorkflows;
				UloNotes = other.UloNotes;
				RegionId = other.RegionId;
				ReviewId = other.ReviewId;
				Organization = other.Organization;
				Fund = other.Fund;
				Prog = other.Prog;
				DocType = other.DocType;
				PegasysDocumentNumber = other.PegasysDocumentNumber;
				PegasysTitleNumber = other.PegasysTitleNumber;
				BBFY = other.BBFY;
				EBFY = other.EBFY;
				Acty = other.Acty;
				SOC = other.SOC;
				Project = other.Project;
				Agreement = other.Agreement;
				ContractNum = other.ContractNum;
				Bldg = other.Bldg;
				SysLoc = other.SysLoc;
				VehTag = other.VehTag;
				WI = other.WI;
				LeaseNumber = other.LeaseNumber;
				VendorName = other.VendorName;
				ActgPd = other.ActgPd;
				TAFS = other.TAFS;
				DUNSNum = other.DUNSNum;
				DaysSinceLastActivity = other.DaysSinceLastActivity;
				DaysSinceFirstActivity = other.DaysSinceFirstActivity;
				TradingPartnerType = other.TradingPartnerType;
				VendorAgencyCode = other.VendorAgencyCode;
				VendorBureauCode = other.VendorBureauCode;
				_Temp = other._Temp;
				Status = other.Status;
				AwardNbr = other.AwardNbr;
				ContractingOfficersName = other.ContractingOfficersName;
				ReasonIncludedInReview = other.ReasonIncludedInReview;
				EASi_Base_Contract_Nbr = other.EASi_Base_Contract_Nbr;
				EASi_GSA_FSS_Other__ = other.EASi_GSA_FSS_Other__;
				ExpectedDateForCompletion = other.ExpectedDateForCompletion;
				TotalLine = other.TotalLine;
				Commitments = other.Commitments;
				Prepayments = other.Prepayments;
				UndelOrders = other.UndelOrders;
				Rcpt = other.Rcpt;
				Accrual = other.Accrual;
				TotalDO = other.TotalDO;
				TotalUDOAndDO = other.TotalUDOAndDO;
				PendPayments = other.PendPayments;
				PymtsInTransit = other.PymtsInTransit;
				PymtsConfirmed = other.PymtsConfirmed;
				Holdbacks = other.Holdbacks;
				DateOfLastActivity = other.DateOfLastActivity;
				DateOfFirstActivity = other.DateOfFirstActivity;
				RWACompletionDate = other.RWACompletionDate;
				EASiAwdExpirationDate = other.EASiAwdExpirationDate;
				ItemsLineNumber = other.ItemsLineNumber;
				AccountingLineNumber = other.AccountingLineNumber;
				OC = other.OC;
				ContractingOfficerEmail = other.ContractingOfficerEmail;
				ContractingSpecialistName = other.ContractingSpecialistName;
				ContractingSpecialistEmail = other.ContractingSpecialistEmail;
				BudgetAnalystEmail = other.BudgetAnalystEmail;
				Valid = other.Valid;
				CardholderName = other.CardholderName;
				CardholderAlias8 = other.CardholderAlias8;
				CardholderAlias = other.CardholderAlias;
				CardholderEmail = other.CardholderEmail;
				CardholderUserId = other.CardholderUserId;
				PegasysDocumentNumberInstance = other.PegasysDocumentNumberInstance;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.Text(Organization, nameof(Organization), true, 0, 50);
			Requires.Text(Fund, nameof(Fund), true, 0, 50);
			Requires.Text(Prog, nameof(Prog), true, 0, 50);
			Requires.Text(DocType, nameof(DocType), true, 0, 50);
			Requires.Text(PegasysDocumentNumber, nameof(PegasysDocumentNumber), true, 0, 50);
			Requires.Text(PegasysTitleNumber, nameof(PegasysTitleNumber), true, 0, 100);
			Requires.Text(BBFY, nameof(BBFY), true, 0, 10);
			Requires.Text(EBFY, nameof(EBFY), true, 0, 10);
			Requires.Text(Acty, nameof(Acty), true, 0, 10);
			Requires.Text(SOC, nameof(SOC), true, 0, 100);
			Requires.Text(Project, nameof(Project), true, 0, 100);
			Requires.Text(Agreement, nameof(Agreement), true, 0, 50);
			Requires.Text(ContractNum, nameof(ContractNum), true, 0, 100);
			Requires.Text(Bldg, nameof(Bldg), true, 0, 50);
			Requires.Text(SysLoc, nameof(SysLoc), true, 0, 50);
			Requires.Text(VehTag, nameof(VehTag), true, 0, 50);
			Requires.Text(LeaseNumber, nameof(LeaseNumber), true, 0, 50);
			Requires.Text(VendorName, nameof(VendorName), true, 0, 100);
			Requires.Text(ActgPd, nameof(ActgPd), true, 0, 50);
			Requires.Text(TAFS, nameof(TAFS), true, 0, 50);
			Requires.Text(DUNSNum, nameof(DUNSNum), true, 0, 50);
			Requires.Text(TradingPartnerType, nameof(TradingPartnerType), true, 0, 50);
			Requires.Text(VendorAgencyCode, nameof(VendorAgencyCode), true, 0, 50);
			Requires.Text(VendorBureauCode, nameof(VendorBureauCode), true, 0, 50);
			Requires.Text(Status, nameof(Status), true, 0, 50);
			Requires.Text(AwardNbr, nameof(AwardNbr), true, 0, 50);
			Requires.Text(ContractingOfficersName, nameof(ContractingOfficersName), true, 0, 50);
			Requires.Text(ReasonIncludedInReview, nameof(ReasonIncludedInReview), true, 0, 500);
			Requires.Text(EASi_Base_Contract_Nbr, nameof(EASi_Base_Contract_Nbr), true, 0, 50);
			Requires.Text(EASi_GSA_FSS_Other__, nameof(EASi_GSA_FSS_Other__), true, 0, 50);
			Requires.Text(ContractingOfficerEmail, nameof(ContractingOfficerEmail), true, 0, 254);
			Requires.Text(ContractingSpecialistName, nameof(ContractingSpecialistName), true, 0, 100);
			Requires.Text(ContractingSpecialistEmail, nameof(ContractingSpecialistEmail), true, 0, 254);
			Requires.Text(BudgetAnalystEmail, nameof(BudgetAnalystEmail), true, 0, 254);
			Requires.Text(CardholderName, nameof(CardholderName), true, 0, 155);
			Requires.Text(CardholderAlias8, nameof(CardholderAlias8), true, 0, 8);
			Requires.Text(CardholderAlias, nameof(CardholderAlias), true, 0, 50);
			Requires.Text(CardholderEmail, nameof(CardholderEmail), true, 0, 254);
			Requires.Text(CardholderUserId, nameof(CardholderUserId), true, 0, 128);
			PartialValidate();
        }
	}//end of entity class UnliquidatedObligation

	[Table("UserUsers", Schema = "dbo")]
	public partial class UserUser : IRdbDataEntity, IValidate, IPreSave, IPrimaryKey<int>
	{
        public static readonly UserUser[] None = new UserUser[0];

		object IPrimaryKey.Key { get { return UserUserId; }}
	
		int IPrimaryKey<int>.Key { get { return UserUserId; }}

		[DisplayName("User User Id")]
		[Display(Name = "User User Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("UserUserId")]
		public int UserUserId { get; set; } 	

		[DisplayName("Parent User Id")]
		[Display(Name = "Parent User Id")]
		[NotNull]
		[Required]
		[MaxLength(128)]
		[Column("ParentUserId", TypeName="nvarchar(128)")]
		public string ParentUserId { get; set; } 	

		//LinksTo:dbo.AspNetUsers
		[ForeignKey("ParentUserId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public AspNetUser ParentUser { get; set; } 

		[DisplayName("Child User Id")]
		[Display(Name = "Child User Id")]
		[NotNull]
		[Required]
		[MaxLength(128)]
		[Column("ChildUserId", TypeName="nvarchar(128)")]
		public string ChildUserId { get; set; } 	

		//LinksTo:dbo.AspNetUsers
		[ForeignKey("ChildUserId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public AspNetUser ChildUser { get; set; } 

		[DisplayName("Region Id")]
		[Display(Name = "Region Id")]
		[Column("RegionId")]
		public int? RegionId { get; set; } 	

		//LinksTo:gsa.Regions
		[ForeignKey("RegionId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Region Region { get; set; } 

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} UserUserId={UserUserId} {extras}";
		}

		partial void OnConstructed();
	
		public UserUser()
			: this(null)
		{}

		public UserUser(UserUser other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					UserUserId = other.UserUserId;
				}
				ParentUserId = other.ParentUserId;
				ChildUserId = other.ChildUserId;
				RegionId = other.RegionId;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(ParentUserId, nameof(ParentUserId));
			Requires.Text(ParentUserId, nameof(ParentUserId), true, 0, 128);
			Requires.NonNull(ChildUserId, nameof(ChildUserId));
			Requires.Text(ChildUserId, nameof(ChildUserId), true, 0, 128);
			PartialValidate();
        }
	}//end of entity class UserUser

	[Table("WorkflowActivities", Schema = "dbo")]
	public partial class WorkflowActivity : IRdbDataEntity, IValidate, IPreSave
	{
        public static readonly WorkflowActivity[] None = new WorkflowActivity[0];

		[DisplayName("Workflow Definition Id")]
		[Display(Name = "Workflow Definition Id")]
		[Column("WorkflowDefinitionId")]
		public int WorkflowDefinitionId { get; set; } 	

		[DisplayName("Workflow Key")]
		[Display(Name = "Workflow Key")]
		[NotNull]
		[Required]
		[MaxLength(80)]
		[Column("WorkflowKey", TypeName="varchar(80)")]
		public string WorkflowKey { get; set; } 	

		[DisplayName("Version")]
		[Display(Name = "Version")]
		[Column("Version")]
		public int Version { get; set; } 	

		[DisplayName("Workflow Definition Name")]
		[Display(Name = "Workflow Definition Name")]
		[MaxLength(50)]
		[Column("WorkflowDefinitionName", TypeName="varchar(50)")]
		public string WorkflowDefinitionName { get; set; } 	

		[DisplayName("Workflow Activity Key")]
		[Display(Name = "Workflow Activity Key")]
		[MaxLength(100)]
		[Column("WorkflowActivityKey", TypeName="nvarchar(100)")]
		public string WorkflowActivityKey { get; set; } 	

		[DisplayName("Workflow Activity Name")]
		[Display(Name = "Workflow Activity Name")]
		[MaxLength(100)]
		[Column("WorkflowActivityName", TypeName="nvarchar(100)")]
		public string WorkflowActivityName { get; set; } 	

		[DisplayName("Owner User Name")]
		[Display(Name = "Owner User Name")]
		[MaxLength(128)]
		[Column("OwnerUserName", TypeName="varchar(128)")]
		public string OwnerUserName { get; set; } 	

		[DisplayName("Sequence Number")]
		[Display(Name = "Sequence Number")]
		[Column("SequenceNumber")]
		public int? SequenceNumber { get; set; } 	

		[DisplayName("Email Template Id")]
		[Display(Name = "Email Template Id")]
		[Column("EmailTemplateId")]
		public int? EmailTemplateId { get; set; } 	

		[DisplayName("Owner User Id")]
		[Display(Name = "Owner User Id")]
		[MaxLength(128)]
		[Column("OwnerUserId", TypeName="nvarchar(128)")]
		public string OwnerUserId { get; set; } 	

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public WorkflowActivity()
			: this(null)
		{}

		public WorkflowActivity(WorkflowActivity other, bool copyKey=false)
		{
			if (other!=null)
			{
				WorkflowDefinitionId = other.WorkflowDefinitionId;
				WorkflowKey = other.WorkflowKey;
				Version = other.Version;
				WorkflowDefinitionName = other.WorkflowDefinitionName;
				WorkflowActivityKey = other.WorkflowActivityKey;
				WorkflowActivityName = other.WorkflowActivityName;
				OwnerUserName = other.OwnerUserName;
				SequenceNumber = other.SequenceNumber;
				EmailTemplateId = other.EmailTemplateId;
				OwnerUserId = other.OwnerUserId;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(WorkflowKey, nameof(WorkflowKey));
			Requires.Text(WorkflowKey, nameof(WorkflowKey), true, 0, 80);
			Requires.Text(WorkflowDefinitionName, nameof(WorkflowDefinitionName), true, 0, 50);
			Requires.Text(WorkflowActivityKey, nameof(WorkflowActivityKey), true, 0, 100);
			Requires.Text(WorkflowActivityName, nameof(WorkflowActivityName), true, 0, 100);
			Requires.Text(OwnerUserName, nameof(OwnerUserName), true, 0, 128);
			Requires.Text(OwnerUserId, nameof(OwnerUserId), true, 0, 128);
			PartialValidate();
        }
	}//end of entity class WorkflowActivity

	[Table("WorkflowDefinitions", Schema = "dbo")]
	public partial class WorkflowDefinition : IRdbDataEntity, IValidate, IPreSave, IPrimaryKey<int>
	{
        public static readonly WorkflowDefinition[] None = new WorkflowDefinition[0];


		//modelBuilder.Entity<Review>(e=>e.HasOne(r=>r.WorkflowDefinition).WithMany(u=>u.WorkflowDefinitionReviews).HasForeignKey(r=>r.WorkflowDefinitionId));
		[InverseProperty(nameof(Review.WorkflowDefinition))]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Review> WorkflowDefinitionReviews { get; set; } = new List<Review>();

		object IPrimaryKey.Key { get { return WorkflowDefinitionId; }}
	
		int IPrimaryKey<int>.Key { get { return WorkflowDefinitionId; }}

		[DisplayName("Workflow Definition Id")]
		[Display(Name = "Workflow Definition Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("WorkflowDefinitionId")]
		public int WorkflowDefinitionId { get; set; } 	

		[DisplayName("Workflow Key")]
		[Display(Name = "Workflow Key")]
		[NotNull]
		[Required]
		[MaxLength(80)]
		[Column("WorkflowKey", TypeName="varchar(80)")]
		public string WorkflowKey { get; set; } 	

		[DisplayName("Version")]
		[Display(Name = "Version")]
		[Column("Version")]
		public int Version { get; set; } = 1;	

		[DisplayName("Description Xml")]
		[Display(Name = "Description Xml")]
		[Column("DescriptionXml")]
		public string DescriptionXml { get; set; } 	

		[DisplayName("Workflow Definition Name")]
		[Display(Name = "Workflow Definition Name")]
		[MaxLength(50)]
		[Column("WorkflowDefinitionName", TypeName="varchar(50)")]
		public string WorkflowDefinitionName { get; set; } 	

		[DisplayName("Is Active")]
		[Display(Name = "Is Active")]
		[Column("IsActive")]
		public bool IsActive { get; set; } = true;	

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} WorkflowDefinitionId={WorkflowDefinitionId} {extras}";
		}

		partial void OnConstructed();
	
		public WorkflowDefinition()
			: this(null)
		{}

		public WorkflowDefinition(WorkflowDefinition other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					WorkflowDefinitionId = other.WorkflowDefinitionId;
				}
				WorkflowDefinitionReviews = other.WorkflowDefinitionReviews;
				WorkflowKey = other.WorkflowKey;
				Version = other.Version;
				DescriptionXml = other.DescriptionXml;
				WorkflowDefinitionName = other.WorkflowDefinitionName;
				IsActive = other.IsActive;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(WorkflowKey, nameof(WorkflowKey));
			Requires.Text(WorkflowKey, nameof(WorkflowKey), true, 0, 80);
			Requires.Text(WorkflowDefinitionName, nameof(WorkflowDefinitionName), true, 0, 50);
			PartialValidate();
        }
	}//end of entity class WorkflowDefinition

	[Table("WorkflowHistory", Schema = "dbo")]
	public partial class WorkflowHistory : IRdbDataEntity, IValidate, IPreSave, IPrimaryKey<int>
	{
        public static readonly WorkflowHistory[] None = new WorkflowHistory[0];

		object IPrimaryKey.Key { get { return WorkflowHistoryId; }}
	
		int IPrimaryKey<int>.Key { get { return WorkflowHistoryId; }}

		[DisplayName("Workflow History Id")]
		[Display(Name = "Workflow History Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("WorkflowHistoryId")]
		public int WorkflowHistoryId { get; set; } 	

		[DisplayName("Workflow Id")]
		[Display(Name = "Workflow Id")]
		[Column("WorkflowId")]
		public int WorkflowId { get; set; } 	

		//LinksTo:dbo.Workflows
		[ForeignKey("WorkflowId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Workflow Workflow { get; set; } 

		[DisplayName("Workflow Key")]
		[Display(Name = "Workflow Key")]
		[NotNull]
		[Required]
		[MaxLength(80)]
		[Column("WorkflowKey", TypeName="varchar(80)")]
		public string WorkflowKey { get; set; } 	

		[DisplayName("Version")]
		[Display(Name = "Version")]
		[Column("Version")]
		public int Version { get; set; } 	

		[DisplayName("Current Workflow Activity Key")]
		[Display(Name = "Current Workflow Activity Key")]
		[NotNull]
		[Required]
		[MaxLength(80)]
		[Column("CurrentWorkflowActivityKey", TypeName="varchar(80)")]
		public string CurrentWorkflowActivityKey { get; set; } 	

		[DisplayName("Owner User Id")]
		[Display(Name = "Owner User Id")]
		[NotNull]
		[Required]
		[MaxLength(128)]
		[Column("OwnerUserId", TypeName="nvarchar(128)")]
		public string OwnerUserId { get; set; } 	

		//LinksTo:dbo.AspNetUsers
		[ForeignKey("OwnerUserId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public AspNetUser OwnerUser { get; set; } 

		[DisplayName("Created At Utc")]
		[Display(Name = "Created At Utc")]
		[DataType(DataType.DateTime)]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; } 	


		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
		[DataType(DataType.DateTime)]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Current Activity Entered At Utc")]
		[Display(Name = "Current Activity Entered At Utc")]
		[DataType(DataType.DateTime)]
		[Column("CurrentActivityEnteredAtUtc")]
		public DateTime CurrentActivityEnteredAtUtc { get; set; } 	


		[DisplayName("Current Activity Entered At")]
		[NotMapped]
		[JsonIgnore]
		[DataType(DataType.DateTime)]
        [IgnoreDataMember]
		public DateTime CurrentActivityEnteredAt => CurrentActivityEnteredAtUtc.ToLocalTime();

		[DisplayName("Target Ulo Id")]
		[Display(Name = "Target Ulo Id")]
		[Column("TargetUloId")]
		public int TargetUloId { get; set; } 	

		[DisplayName("Workflow Row Version")]
		[Display(Name = "Workflow Row Version")]
		[Column("WorkflowRowVersion", TypeName="binary(8)")]
		public byte[] WorkflowRowVersion { get; set; } 	

		[DisplayName("Current Activity Exited At Utc")]
		[Display(Name = "Current Activity Exited At Utc")]
		[DataType(DataType.DateTime)]
		[Column("CurrentActivityExitedAtUtc")]
		public DateTime CurrentActivityExitedAtUtc { get; set; } 	


		[DisplayName("Current Activity Exited At")]
		[NotMapped]
		[JsonIgnore]
		[DataType(DataType.DateTime)]
        [IgnoreDataMember]
		public DateTime CurrentActivityExitedAt => CurrentActivityExitedAtUtc.ToLocalTime();

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} WorkflowHistoryId={WorkflowHistoryId} {extras}";
		}

		partial void OnConstructed();
	
		public WorkflowHistory()
			: this(null)
		{}

		public WorkflowHistory(WorkflowHistory other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					WorkflowHistoryId = other.WorkflowHistoryId;
				}
				WorkflowId = other.WorkflowId;
				WorkflowKey = other.WorkflowKey;
				Version = other.Version;
				CurrentWorkflowActivityKey = other.CurrentWorkflowActivityKey;
				OwnerUserId = other.OwnerUserId;
				CurrentActivityEnteredAtUtc = other.CurrentActivityEnteredAtUtc;
				TargetUloId = other.TargetUloId;
				WorkflowRowVersion = other.WorkflowRowVersion;
				CurrentActivityExitedAtUtc = other.CurrentActivityExitedAtUtc;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(WorkflowKey, nameof(WorkflowKey));
			Requires.Text(WorkflowKey, nameof(WorkflowKey), true, 0, 80);
			Requires.NonNull(CurrentWorkflowActivityKey, nameof(CurrentWorkflowActivityKey));
			Requires.Text(CurrentWorkflowActivityKey, nameof(CurrentWorkflowActivityKey), true, 0, 80);
			Requires.NonNull(OwnerUserId, nameof(OwnerUserId));
			Requires.Text(OwnerUserId, nameof(OwnerUserId), true, 0, 128);
			PartialValidate();
        }
	}//end of entity class WorkflowHistory

	[Table("WorkflowJustifications", Schema = "dbo")]
	public partial class WorkflowJustification : IRdbDataEntity, IValidate, IPreSave
	{
        public static readonly WorkflowJustification[] None = new WorkflowJustification[0];

		[DisplayName("Workflow Key")]
		[Display(Name = "Workflow Key")]
		[NotNull]
		[Required]
		[MaxLength(80)]
		[Column("WorkflowKey", TypeName="varchar(80)")]
		public string WorkflowKey { get; set; } 	

		[DisplayName("Justification Key")]
		[Display(Name = "Justification Key")]
		[MaxLength(80)]
		[Column("JustificationKey", TypeName="nvarchar(80)")]
		public string JustificationKey { get; set; } 	

		[DisplayName("Justification Description")]
		[Display(Name = "Justification Description")]
		[MaxLength(1024)]
		[Column("JustificationDescription", TypeName="nvarchar(1024)")]
		public string JustificationDescription { get; set; } 	

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public WorkflowJustification()
			: this(null)
		{}

		public WorkflowJustification(WorkflowJustification other, bool copyKey=false)
		{
			if (other!=null)
			{
				WorkflowKey = other.WorkflowKey;
				JustificationKey = other.JustificationKey;
				JustificationDescription = other.JustificationDescription;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(WorkflowKey, nameof(WorkflowKey));
			Requires.Text(WorkflowKey, nameof(WorkflowKey), true, 0, 80);
			Requires.Text(JustificationKey, nameof(JustificationKey), true, 0, 80);
			Requires.Text(JustificationDescription, nameof(JustificationDescription), true, 0, 1024);
			PartialValidate();
        }
	}//end of entity class WorkflowJustification

	[Table("WorkflowProhibitedOwners", Schema = "dbo")]
	public partial class WorkflowProhibitedOwner : IRdbDataEntity, IValidate, IPreSave
	{
        public static readonly WorkflowProhibitedOwner[] None = new WorkflowProhibitedOwner[0];

		[DisplayName("Workflow Id")]
		[Display(Name = "Workflow Id")]
		[Column("WorkflowId")]
		public int WorkflowId { get; set; } 	

		[DisplayName("Prohibited Owner User Id")]
		[Display(Name = "Prohibited Owner User Id")]
		[NotNull]
		[Required]
		[MaxLength(128)]
		[Column("ProhibitedOwnerUserId", TypeName="nvarchar(128)")]
		public string ProhibitedOwnerUserId { get; set; } 	

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public WorkflowProhibitedOwner()
			: this(null)
		{}

		public WorkflowProhibitedOwner(WorkflowProhibitedOwner other, bool copyKey=false)
		{
			if (other!=null)
			{
				WorkflowId = other.WorkflowId;
				ProhibitedOwnerUserId = other.ProhibitedOwnerUserId;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(ProhibitedOwnerUserId, nameof(ProhibitedOwnerUserId));
			Requires.Text(ProhibitedOwnerUserId, nameof(ProhibitedOwnerUserId), true, 0, 128);
			PartialValidate();
        }
	}//end of entity class WorkflowProhibitedOwner

	[Table("Workflows", Schema = "dbo")]
	public partial class Workflow : IRdbDataEntity, IValidate, IPreSave, IPrimaryKey<int>
	{
        public static readonly Workflow[] None = new Workflow[0];


		//modelBuilder.Entity<Document>(e=>e.HasOne(r=>r.Workflow).WithMany(u=>u.WorkflowDocuments).HasForeignKey(r=>r.WorkflowId));
		[InverseProperty(nameof(Document.Workflow))]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Document> WorkflowDocuments { get; set; } = new List<Document>();


		//modelBuilder.Entity<UnliqudatedObjectsWorkflowQuestion>(e=>e.HasOne(r=>r.Workflow).WithMany(u=>u.WorkflowUnliqudatedObjectsWorkflowQuestions).HasForeignKey(r=>r.WorkflowId));
		[InverseProperty(nameof(UnliqudatedObjectsWorkflowQuestion.Workflow))]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<UnliqudatedObjectsWorkflowQuestion> WorkflowUnliqudatedObjectsWorkflowQuestions { get; set; } = new List<UnliqudatedObjectsWorkflowQuestion>();


		//modelBuilder.Entity<WorkflowHistory>(e=>e.HasOne(r=>r.Workflow).WithMany(u=>u.WorkflowWorkflowHistorys).HasForeignKey(r=>r.WorkflowId));
		[InverseProperty(nameof(WorkflowHistory.Workflow))]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<WorkflowHistory> WorkflowWorkflowHistorys { get; set; } = new List<WorkflowHistory>();


		//modelBuilder.Entity<RequestForReassignment>(e=>e.HasOne(r=>r.Workflow).WithMany(u=>u.WorkflowRequestForReassignments).HasForeignKey(r=>r.WorkflowId));
		[InverseProperty(nameof(RequestForReassignment.Workflow))]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<RequestForReassignment> WorkflowRequestForReassignments { get; set; } = new List<RequestForReassignment>();


		//modelBuilder.Entity<WorkflowView>(e=>e.HasOne(r=>r.Workflow).WithMany(u=>u.WorkflowWorkflowViews).HasForeignKey(r=>r.WorkflowId));
		[InverseProperty(nameof(WorkflowView.Workflow))]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<WorkflowView> WorkflowWorkflowViews { get; set; } = new List<WorkflowView>();

		object IPrimaryKey.Key { get { return WorkflowId; }}
	
		int IPrimaryKey<int>.Key { get { return WorkflowId; }}

		[DisplayName("Workflow Id")]
		[Display(Name = "Workflow Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("WorkflowId")]
		public int WorkflowId { get; set; } 	

		[DisplayName("Workflow Key")]
		[Display(Name = "Workflow Key")]
		[NotNull]
		[Required]
		[MaxLength(80)]
		[Column("WorkflowKey", TypeName="varchar(80)")]
		public string WorkflowKey { get; set; } 	

		[DisplayName("Version")]
		[Display(Name = "Version")]
		[Column("Version")]
		public int Version { get; set; } 	

		[DisplayName("Current Workflow Activity Key")]
		[Display(Name = "Current Workflow Activity Key")]
		[NotNull]
		[Required]
		[MaxLength(80)]
		[Column("CurrentWorkflowActivityKey", TypeName="varchar(80)")]
		public string CurrentWorkflowActivityKey { get; set; } 	

		[DisplayName("Owner User Id")]
		[Display(Name = "Owner User Id")]
		[NotNull]
		[Required]
		[MaxLength(128)]
		[Column("OwnerUserId", TypeName="nvarchar(128)")]
		public string OwnerUserId { get; set; } 	

		//LinksTo:dbo.AspNetUsers
		[ForeignKey("OwnerUserId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public AspNetUser OwnerUser { get; set; } 

		[DisplayName("Created At Utc")]
		[Display(Name = "Created At Utc")]
		[DataType(DataType.DateTime)]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; } = DateTime.UtcNow;	


		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
		[DataType(DataType.DateTime)]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Current Activity Entered At Utc")]
		[Display(Name = "Current Activity Entered At Utc")]
		[DataType(DataType.DateTime)]
		[Column("CurrentActivityEnteredAtUtc")]
		public DateTime CurrentActivityEnteredAtUtc { get; set; } 	


		[DisplayName("Current Activity Entered At")]
		[NotMapped]
		[JsonIgnore]
		[DataType(DataType.DateTime)]
        [IgnoreDataMember]
		public DateTime CurrentActivityEnteredAt => CurrentActivityEnteredAtUtc.ToLocalTime();

		[DisplayName("Target Ulo Id")]
		[Display(Name = "Target Ulo Id")]
		[Column("TargetUloId")]
		public int TargetUloId { get; set; } 	

		//LinksTo:dbo.UnliquidatedObligations
		[ForeignKey("TargetUloId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public UnliquidatedObligation TargetUlo { get; set; } 

		[DisplayName("Expected Duration In Seconds")]
		[Display(Name = "Expected Duration In Seconds")]
		[Column("ExpectedDurationInSeconds")]
		public long? ExpectedDurationInSeconds { get; set; } 	

		[DisplayName("Due At Utc")]
		[Display(Name = "Due At Utc")]
		[DataType(DataType.DateTime)]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("DueAtUtc")]
		public DateTime? DueAtUtc { get; set; } 	


		[DisplayName("Due At")]
		[NotMapped]
		[JsonIgnore]
		[DataType(DataType.DateTime)]
        [IgnoreDataMember]
		public DateTime? DueAt => DueAtUtc?.ToLocalTime();

		[DisplayName("Workflow Row Version")]
		[Display(Name = "Workflow Row Version")]
		[Column("WorkflowRowVersion")]
		public byte[] WorkflowRowVersion { get; set; } 	

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} WorkflowId={WorkflowId} {extras}";
		}

		partial void OnConstructed();
	
		public Workflow()
			: this(null)
		{}

		public Workflow(Workflow other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					WorkflowId = other.WorkflowId;
				}
				WorkflowDocuments = other.WorkflowDocuments;
				WorkflowUnliqudatedObjectsWorkflowQuestions = other.WorkflowUnliqudatedObjectsWorkflowQuestions;
				WorkflowWorkflowHistorys = other.WorkflowWorkflowHistorys;
				WorkflowRequestForReassignments = other.WorkflowRequestForReassignments;
				WorkflowWorkflowViews = other.WorkflowWorkflowViews;
				WorkflowKey = other.WorkflowKey;
				Version = other.Version;
				CurrentWorkflowActivityKey = other.CurrentWorkflowActivityKey;
				OwnerUserId = other.OwnerUserId;
				CurrentActivityEnteredAtUtc = other.CurrentActivityEnteredAtUtc;
				TargetUloId = other.TargetUloId;
				ExpectedDurationInSeconds = other.ExpectedDurationInSeconds;
				WorkflowRowVersion = other.WorkflowRowVersion;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(WorkflowKey, nameof(WorkflowKey));
			Requires.Text(WorkflowKey, nameof(WorkflowKey), true, 0, 80);
			Requires.NonNull(CurrentWorkflowActivityKey, nameof(CurrentWorkflowActivityKey));
			Requires.Text(CurrentWorkflowActivityKey, nameof(CurrentWorkflowActivityKey), true, 0, 80);
			Requires.NonNull(OwnerUserId, nameof(OwnerUserId));
			Requires.Text(OwnerUserId, nameof(OwnerUserId), true, 0, 128);
			PartialValidate();
        }
	}//end of entity class Workflow

	[Table("WorkflowViews", Schema = "dbo")]
	public partial class WorkflowView : IRdbDataEntity, IValidate, IPreSave, IPrimaryKey<int>
	{
        public static readonly WorkflowView[] None = new WorkflowView[0];

		object IPrimaryKey.Key { get { return WorkflowViewId; }}
	
		int IPrimaryKey<int>.Key { get { return WorkflowViewId; }}

		[DisplayName("Workflow View Id")]
		[Display(Name = "Workflow View Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("WorkflowViewId")]
		public int WorkflowViewId { get; set; } 	

		[DisplayName("Workflow Id")]
		[Display(Name = "Workflow Id")]
		[Column("WorkflowId")]
		public int WorkflowId { get; set; } 	

		//LinksTo:dbo.Workflows
		[ForeignKey("WorkflowId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Workflow Workflow { get; set; } 

		[DisplayName("User Id")]
		[Display(Name = "User Id")]
		[NotNull]
		[Required]
		[MaxLength(128)]
		[Column("UserId", TypeName="nvarchar(128)")]
		public string UserId { get; set; } 	

		//LinksTo:dbo.AspNetUsers
		[ForeignKey("UserId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public AspNetUser User { get; set; } 

		[DisplayName("Action At Utc")]
		[Display(Name = "Action At Utc")]
		[DataType(DataType.DateTime)]
		[Column("ActionAtUtc")]
		public DateTime ActionAtUtc { get; set; } = DateTime.UtcNow;	


		[DisplayName("Action At")]
		[NotMapped]
		[JsonIgnore]
		[DataType(DataType.DateTime)]
        [IgnoreDataMember]
		public DateTime ActionAt => ActionAtUtc.ToLocalTime();

		[DisplayName("View Action")]
		[Display(Name = "View Action")]
		[NotNull]
		[Required]
		[MaxLength(1)]
		[Column("ViewAction", TypeName="char(1)")]
		public string ViewAction { get; set; } 	

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} WorkflowViewId={WorkflowViewId} {extras}";
		}

		partial void OnConstructed();
	
		public WorkflowView()
			: this(null)
		{}

		public WorkflowView(WorkflowView other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					WorkflowViewId = other.WorkflowViewId;
				}
				WorkflowId = other.WorkflowId;
				UserId = other.UserId;
				ActionAtUtc = other.ActionAtUtc;
				ViewAction = other.ViewAction;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(UserId, nameof(UserId));
			Requires.Text(UserId, nameof(UserId), true, 0, 128);
			Requires.NonNull(ViewAction, nameof(ViewAction));
			Requires.Text(ViewAction, nameof(ViewAction), true, 0, 1);
			PartialValidate();
        }
	}//end of entity class WorkflowView

	[Table("Regions", Schema = "gsa")]
	public partial class Region : IRdbDataEntity, IValidate, IPreSave, IPrimaryKey<int>
	{
        public static readonly Region[] None = new Region[0];


		//modelBuilder.Entity<UserUser>(e=>e.HasOne(r=>r.Region).WithMany(u=>u.RegionUserUsers).HasForeignKey(r=>r.RegionId));
		[InverseProperty(nameof(UserUser.Region))]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<UserUser> RegionUserUsers { get; set; } = new List<UserUser>();


		//modelBuilder.Entity<UnliquidatedObligation>(e=>e.HasOne(r=>r.Region).WithMany(u=>u.RegionUnliquidatedObligations).HasForeignKey(r=>r.RegionId));
		[InverseProperty(nameof(UnliquidatedObligation.Region))]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<UnliquidatedObligation> RegionUnliquidatedObligations { get; set; } = new List<UnliquidatedObligation>();


		//modelBuilder.Entity<PdnAttribute>(e=>e.HasOne(r=>r.Region).WithMany(u=>u.RegionPdnAttributes).HasForeignKey(r=>r.RegionId));
		[InverseProperty(nameof(PdnAttribute.Region))]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<PdnAttribute> RegionPdnAttributes { get; set; } = new List<PdnAttribute>();

		object IPrimaryKey.Key { get { return RegionId; }}
	
		int IPrimaryKey<int>.Key { get { return RegionId; }}

		[DisplayName("Region Id")]
		[Display(Name = "Region Id")]
		[Key]
		[Column("RegionId")]
		public int RegionId { get; set; } 	

		[DisplayName("Zone Id")]
		[Display(Name = "Zone Id")]
		[Column("ZoneId")]
		public int ZoneId { get; set; } 	

		//LinksTo:gsa.Zones
		[ForeignKey("ZoneId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Zone Zone { get; set; } 

		[DisplayName("Region Number")]
		[Display(Name = "Region Number")]
		[NotNull]
		[Required]
		[MaxLength(10)]
		[Column("RegionNumber", TypeName="varchar(10)")]
		public string RegionNumber { get; set; } 	

		[DisplayName("Region Name")]
		[Display(Name = "Region Name")]
		[NotNull]
		[Required]
		[MaxLength(100)]
		[Column("RegionName", TypeName="varchar(100)")]
		public string RegionName { get; set; } 	

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} RegionId={RegionId} {extras}";
		}

		partial void OnConstructed();
	
		public Region()
			: this(null)
		{}

		public Region(Region other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					RegionId = other.RegionId;
				}
				RegionUserUsers = other.RegionUserUsers;
				RegionUnliquidatedObligations = other.RegionUnliquidatedObligations;
				RegionPdnAttributes = other.RegionPdnAttributes;
				ZoneId = other.ZoneId;
				RegionNumber = other.RegionNumber;
				RegionName = other.RegionName;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(RegionNumber, nameof(RegionNumber));
			Requires.Text(RegionNumber, nameof(RegionNumber), true, 0, 10);
			Requires.NonNull(RegionName, nameof(RegionName));
			Requires.Text(RegionName, nameof(RegionName), true, 0, 100);
			PartialValidate();
        }
	}//end of entity class Region

	[Table("Zones", Schema = "gsa")]
	public partial class Zone : IRdbDataEntity, IValidate, IPreSave, IPrimaryKey<int>
	{
        public static readonly Zone[] None = new Zone[0];


		//modelBuilder.Entity<Region>(e=>e.HasOne(r=>r.Zone).WithMany(u=>u.ZoneRegions).HasForeignKey(r=>r.ZoneId));
		[InverseProperty(nameof(Region.Zone))]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Region> ZoneRegions { get; set; } = new List<Region>();

		object IPrimaryKey.Key { get { return ZoneId; }}
	
		int IPrimaryKey<int>.Key { get { return ZoneId; }}

		[DisplayName("Zone Id")]
		[Display(Name = "Zone Id")]
		[Key]
		[Column("ZoneId")]
		public int ZoneId { get; set; } 	

		[DisplayName("Zone Name")]
		[Display(Name = "Zone Name")]
		[NotNull]
		[Required]
		[MaxLength(100)]
		[Column("ZoneName", TypeName="varchar(100)")]
		public string ZoneName { get; set; } 	

		[DisplayName("Zone Short Name")]
		[Display(Name = "Zone Short Name")]
		[MaxLength(100)]
		[Column("ZoneShortName", TypeName="varchar(100)")]
		public string ZoneShortName { get; set; } 	

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} ZoneId={ZoneId} {extras}";
		}

		partial void OnConstructed();
	
		public Zone()
			: this(null)
		{}

		public Zone(Zone other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					ZoneId = other.ZoneId;
				}
				ZoneRegions = other.ZoneRegions;
				ZoneName = other.ZoneName;
				ZoneShortName = other.ZoneShortName;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(ZoneName, nameof(ZoneName));
			Requires.Text(ZoneName, nameof(ZoneName), true, 0, 100);
			Requires.Text(ZoneShortName, nameof(ZoneShortName), true, 0, 100);
			PartialValidate();
        }
	}//end of entity class Zone

	public partial class GetEligibleReviewers_Result0 : IRdbDataEntity, IValidate, IPreSave
	{
        public static readonly GetEligibleReviewers_Result0[] None = new GetEligibleReviewers_Result0[0];

		[DisplayName("Workflow Id")]
		[Display(Name = "Workflow Id")]
		[Column("WorkflowId")]
		public int WorkflowId { get; set; } 	

		[DisplayName("User Id")]
		[Display(Name = "User Id")]
		[NotNull]
		[Required]
		[MaxLength(256)]
		[Column("UserId", TypeName="nvarchar(256)")]
		public string UserId { get; set; } 	

		[DisplayName("Is Qualified")]
		[Display(Name = "Is Qualified")]
		[Column("IsQualified")]
		public bool IsQualified { get; set; } 	

		[DisplayName("User Name")]
		[Display(Name = "User Name")]
		[NotNull]
		[Required]
		[MaxLength(512)]
		[Column("UserName", TypeName="nvarchar(512)")]
		public string UserName { get; set; } 	

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public GetEligibleReviewers_Result0()
			: this(null)
		{}

		public GetEligibleReviewers_Result0(GetEligibleReviewers_Result0 other, bool copyKey=false)
		{
			if (other!=null)
			{
				WorkflowId = other.WorkflowId;
				UserId = other.UserId;
				IsQualified = other.IsQualified;
				UserName = other.UserName;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(UserId, nameof(UserId));
			Requires.Text(UserId, nameof(UserId), true, 0, 256);
			Requires.NonNull(UserName, nameof(UserName));
			Requires.Text(UserName, nameof(UserName), true, 0, 512);
			PartialValidate();
        }
	}//end of entity class GetEligibleReviewers_Result0

	public partial class GetMyGroups_Result0 : IRdbDataEntity, IValidate, IPreSave
	{
        public static readonly GetMyGroups_Result0[] None = new GetMyGroups_Result0[0];

		[DisplayName("User Id")]
		[Display(Name = "User Id")]
		[NotNull]
		[Required]
		[MaxLength(256)]
		[Column("UserId", TypeName="nvarchar(256)")]
		public string UserId { get; set; } 	

		[DisplayName("User Name")]
		[Display(Name = "User Name")]
		[NotNull]
		[Required]
		[MaxLength(512)]
		[Column("UserName", TypeName="nvarchar(512)")]
		public string UserName { get; set; } 	

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public GetMyGroups_Result0()
			: this(null)
		{}

		public GetMyGroups_Result0(GetMyGroups_Result0 other, bool copyKey=false)
		{
			if (other!=null)
			{
				UserId = other.UserId;
				UserName = other.UserName;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(UserId, nameof(UserId));
			Requires.Text(UserId, nameof(UserId), true, 0, 256);
			Requires.NonNull(UserName, nameof(UserName));
			Requires.Text(UserName, nameof(UserName), true, 0, 512);
			PartialValidate();
        }
	}//end of entity class GetMyGroups_Result0

	public partial class GetUloSummariesByPdn_Result0 : IRdbDataEntity, IValidate, IPreSave
	{
        public static readonly GetUloSummariesByPdn_Result0[] None = new GetUloSummariesByPdn_Result0[0];

		[DisplayName("Justification Description")]
		[Display(Name = "Justification Description")]
		[NotNull]
		[Required]
		[MaxLength(2048)]
		[Column("JustificationDescription", TypeName="nvarchar(2048)")]
		public string JustificationDescription { get; set; } 	

		[DisplayName("Comments")]
		[Display(Name = "Comments")]
		[NotNull]
		[Required]
		[MaxLength(8000)]
		[Column("Comments", TypeName="nvarchar(8000)")]
		public string Comments { get; set; } 	

		[DisplayName("Ulo Id")]
		[Display(Name = "Ulo Id")]
		[Column("UloId")]
		public int UloId { get; set; } 	

		[DisplayName("Workflow Id")]
		[Display(Name = "Workflow Id")]
		[Column("WorkflowId")]
		public int WorkflowId { get; set; } 	

		[DisplayName("Review Name")]
		[Display(Name = "Review Name")]
		[NotNull]
		[Required]
		[MaxLength(100)]
		[Column("ReviewName", TypeName="varchar(100)")]
		public string ReviewName { get; set; } 	

		[DisplayName("Review Created At Utc")]
		[Display(Name = "Review Created At Utc")]
		[DataType(DataType.DateTime)]
		[Column("ReviewCreatedAtUtc")]
		public DateTime ReviewCreatedAtUtc { get; set; } 	


		[DisplayName("Review Created At")]
		[NotMapped]
		[JsonIgnore]
		[DataType(DataType.DateTime)]
        [IgnoreDataMember]
		public DateTime ReviewCreatedAt => ReviewCreatedAtUtc.ToLocalTime();

		[DisplayName("Document Count")]
		[Display(Name = "Document Count")]
		[Column("DocumentCount")]
		public int DocumentCount { get; set; } 	

		[DisplayName("User Name")]
		[Display(Name = "User Name")]
		[NotNull]
		[Required]
		[MaxLength(512)]
		[Column("UserName", TypeName="nvarchar(512)")]
		public string UserName { get; set; } 	

		[DisplayName("Answer")]
		[Display(Name = "Answer")]
		[NotNull]
		[Required]
		[MaxLength(100)]
		[Column("Answer", TypeName="varchar(100)")]
		public string Answer { get; set; } 	

		[DisplayName("Workflow Activity Name")]
		[Display(Name = "Workflow Activity Name")]
		[NotNull]
		[Required]
		[MaxLength(200)]
		[Column("WorkflowActivityName", TypeName="nvarchar(200)")]
		public string WorkflowActivityName { get; set; } 	

		[DisplayName("Justification Key")]
		[Display(Name = "Justification Key")]
		[NotNull]
		[Required]
		[MaxLength(80)]
		[Column("JustificationKey", TypeName="varchar(80)")]
		public string JustificationKey { get; set; } 	

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public GetUloSummariesByPdn_Result0()
			: this(null)
		{}

		public GetUloSummariesByPdn_Result0(GetUloSummariesByPdn_Result0 other, bool copyKey=false)
		{
			if (other!=null)
			{
				JustificationDescription = other.JustificationDescription;
				Comments = other.Comments;
				UloId = other.UloId;
				WorkflowId = other.WorkflowId;
				ReviewName = other.ReviewName;
				ReviewCreatedAtUtc = other.ReviewCreatedAtUtc;
				DocumentCount = other.DocumentCount;
				UserName = other.UserName;
				Answer = other.Answer;
				WorkflowActivityName = other.WorkflowActivityName;
				JustificationKey = other.JustificationKey;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(JustificationDescription, nameof(JustificationDescription));
			Requires.Text(JustificationDescription, nameof(JustificationDescription), true, 0, 2048);
			Requires.NonNull(Comments, nameof(Comments));
			Requires.Text(Comments, nameof(Comments), true, 0, 8000);
			Requires.NonNull(ReviewName, nameof(ReviewName));
			Requires.Text(ReviewName, nameof(ReviewName), true, 0, 100);
			Requires.NonNull(UserName, nameof(UserName));
			Requires.Text(UserName, nameof(UserName), true, 0, 512);
			Requires.NonNull(Answer, nameof(Answer));
			Requires.Text(Answer, nameof(Answer), true, 0, 100);
			Requires.NonNull(WorkflowActivityName, nameof(WorkflowActivityName));
			Requires.Text(WorkflowActivityName, nameof(WorkflowActivityName), true, 0, 200);
			Requires.NonNull(JustificationKey, nameof(JustificationKey));
			Requires.Text(JustificationKey, nameof(JustificationKey), true, 0, 80);
			PartialValidate();
        }
	}//end of entity class GetUloSummariesByPdn_Result0

	public partial class ListableWorkflows_Result0 : IRdbDataEntity, IValidate, IPreSave
	{
        public static readonly ListableWorkflows_Result0[] None = new ListableWorkflows_Result0[0];

		[DisplayName("Workflow Id")]
		[Display(Name = "Workflow Id")]
		[Column("WorkflowId")]
		public int WorkflowId { get; set; } 	

		[DisplayName("Workflow Key")]
		[Display(Name = "Workflow Key")]
		[NotNull]
		[Required]
		[MaxLength(80)]
		[Column("WorkflowKey", TypeName="varchar(80)")]
		public string WorkflowKey { get; set; } 	

		[DisplayName("Version")]
		[Display(Name = "Version")]
		[Column("Version")]
		public int Version { get; set; } 	

		[DisplayName("Current Workflow Activity Key")]
		[Display(Name = "Current Workflow Activity Key")]
		[NotNull]
		[Required]
		[MaxLength(80)]
		[Column("CurrentWorkflowActivityKey", TypeName="varchar(80)")]
		public string CurrentWorkflowActivityKey { get; set; } 	

		[DisplayName("Owner User Id")]
		[Display(Name = "Owner User Id")]
		[NotNull]
		[Required]
		[MaxLength(128)]
		[Column("OwnerUserId", TypeName="nvarchar(128)")]
		public string OwnerUserId { get; set; } 	

		[DisplayName("Created At Utc")]
		[Display(Name = "Created At Utc")]
		[DataType(DataType.DateTime)]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; } 	


		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
		[DataType(DataType.DateTime)]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Current Activity Entered At Utc")]
		[Display(Name = "Current Activity Entered At Utc")]
		[DataType(DataType.DateTime)]
		[Column("CurrentActivityEnteredAtUtc")]
		public DateTime CurrentActivityEnteredAtUtc { get; set; } 	


		[DisplayName("Current Activity Entered At")]
		[NotMapped]
		[JsonIgnore]
		[DataType(DataType.DateTime)]
        [IgnoreDataMember]
		public DateTime CurrentActivityEnteredAt => CurrentActivityEnteredAtUtc.ToLocalTime();

		[DisplayName("Target Ulo Id")]
		[Display(Name = "Target Ulo Id")]
		[Column("TargetUloId")]
		public int TargetUloId { get; set; } 	

		[DisplayName("Expected Duration In Seconds")]
		[Display(Name = "Expected Duration In Seconds")]
		[Column("ExpectedDurationInSeconds")]
		public long? ExpectedDurationInSeconds { get; set; } 	

		[DisplayName("Due At Utc")]
		[Display(Name = "Due At Utc")]
		[DataType(DataType.DateTime)]
		[Column("DueAtUtc")]
		public DateTime? DueAtUtc { get; set; } 	


		[DisplayName("Due At")]
		[NotMapped]
		[JsonIgnore]
		[DataType(DataType.DateTime)]
        [IgnoreDataMember]
		public DateTime? DueAt => DueAtUtc?.ToLocalTime();

		[DisplayName("Workflow Row Version")]
		[Display(Name = "Workflow Row Version")]
		[Column("WorkflowRowVersion")]
		public byte[] WorkflowRowVersion { get; set; } 	

		[DisplayName("Answer")]
		[Display(Name = "Answer")]
		[MaxLength(100)]
		[Column("Answer", TypeName="varchar(100)")]
		public string Answer { get; set; } 	

		[DisplayName("Answered At Utc")]
		[Display(Name = "Answered At Utc")]
		[DataType(DataType.DateTime)]
		[Column("AnsweredAtUtc")]
		public DateTime? AnsweredAtUtc { get; set; } 	


		[DisplayName("Answered At")]
		[NotMapped]
		[JsonIgnore]
		[DataType(DataType.DateTime)]
        [IgnoreDataMember]
		public DateTime? AnsweredAt => AnsweredAtUtc?.ToLocalTime();

		[DisplayName("Answered By User Name")]
		[Display(Name = "Answered By User Name")]
		[MaxLength(256)]
		[Column("AnsweredByUserName", TypeName="nvarchar(256)")]
		public string AnsweredByUserName { get; set; } 	

		[DisplayName("Answered By User Id")]
		[Display(Name = "Answered By User Id")]
		[MaxLength(128)]
		[Column("AnsweredByUserId", TypeName="nvarchar(128)")]
		public string AnsweredByUserId { get; set; } 	

		[DisplayName("Viewed At Utc")]
		[Display(Name = "Viewed At Utc")]
		[DataType(DataType.DateTime)]
		[Column("ViewedAtUtc")]
		public DateTime? ViewedAtUtc { get; set; } 	


		[DisplayName("Viewed At")]
		[NotMapped]
		[JsonIgnore]
		[DataType(DataType.DateTime)]
        [IgnoreDataMember]
		public DateTime? ViewedAt => ViewedAtUtc?.ToLocalTime();

		[DisplayName("Is Read")]
		[Display(Name = "Is Read")]
		[Column("IsRead")]
		public bool? IsRead { get; set; } 	

		[DisplayName("Review Id")]
		[Display(Name = "Review Id")]
		[Column("ReviewId")]
		public int ReviewId { get; set; } 	

		[DisplayName("Review Name")]
		[Display(Name = "Review Name")]
		[MaxLength(100)]
		[Column("ReviewName", TypeName="varchar(100)")]
		public string ReviewName { get; set; } 	

		[DisplayName("Region Id")]
		[Display(Name = "Region Id")]
		[Column("RegionId")]
		public int RegionId { get; set; } 	

		[DisplayName("Region Number")]
		[Display(Name = "Region Number")]
		[NotNull]
		[Required]
		[MaxLength(10)]
		[Column("RegionNumber", TypeName="varchar(10)")]
		public string RegionNumber { get; set; } 	

		[DisplayName("Region Name")]
		[Display(Name = "Region Name")]
		[NotNull]
		[Required]
		[MaxLength(100)]
		[Column("RegionName", TypeName="varchar(100)")]
		public string RegionName { get; set; } 	

		[DisplayName("Zone Id")]
		[Display(Name = "Zone Id")]
		[Column("ZoneId")]
		public int ZoneId { get; set; } 	

		[DisplayName("Zone Short Name")]
		[Display(Name = "Zone Short Name")]
		[MaxLength(100)]
		[Column("ZoneShortName", TypeName="varchar(100)")]
		public string ZoneShortName { get; set; } 	

		[DisplayName("Zone Name")]
		[Display(Name = "Zone Name")]
		[NotNull]
		[Required]
		[MaxLength(100)]
		[Column("ZoneName", TypeName="varchar(100)")]
		public string ZoneName { get; set; } 	

		[DisplayName("Pegasys Document Number")]
		[Display(Name = "Pegasys Document Number")]
		[MaxLength(50)]
		[Column("PegasysDocumentNumber", TypeName="varchar(50)")]
		public string PegasysDocumentNumber { get; set; } 	

		[DisplayName("Pegasys Document Number Instance")]
		[Display(Name = "Pegasys Document Number Instance")]
		[Column("PegasysDocumentNumberInstance")]
		public int? PegasysDocumentNumberInstance { get; set; } 	

		[DisplayName("Ba Code")]
		[Display(Name = "Ba Code")]
		[MaxLength(50)]
		[Column("BaCode", TypeName="varchar(50)")]
		public string BaCode { get; set; } 	

		[DisplayName("Status")]
		[Display(Name = "Status")]
		[MaxLength(50)]
		[Column("Status", TypeName="varchar(50)")]
		public string Status { get; set; } 	

		[DisplayName("Org")]
		[Display(Name = "Org")]
		[MaxLength(50)]
		[Column("Org", TypeName="varchar(50)")]
		public string Org { get; set; } 	

		[DisplayName("Amount")]
		[Display(Name = "Amount")]
		[DataType(DataType.Currency)]
		[Column("Amount", TypeName="money(0, 0)")]
		public decimal? Amount { get; set; } 	

		[DisplayName("Valid")]
		[Display(Name = "Valid")]
		[Column("Valid")]
		public bool? Valid { get; set; } 	

		[DisplayName("Fund")]
		[Display(Name = "Fund")]
		[MaxLength(50)]
		[Column("Fund", TypeName="varchar(50)")]
		public string Fund { get; set; } 	

		[DisplayName("Pegasys Title Number")]
		[Display(Name = "Pegasys Title Number")]
		[MaxLength(100)]
		[Column("PegasysTitleNumber", TypeName="varchar(100)")]
		public string PegasysTitleNumber { get; set; } 	

		[DisplayName("Vendor Name")]
		[Display(Name = "Vendor Name")]
		[MaxLength(100)]
		[Column("VendorName", TypeName="varchar(100)")]
		public string VendorName { get; set; } 	

		[DisplayName("Contracting Officers Name")]
		[Display(Name = "Contracting Officers Name")]
		[MaxLength(50)]
		[Column("ContractingOfficersName", TypeName="varchar(50)")]
		public string ContractingOfficersName { get; set; } 	

		[DisplayName("Award Nbr")]
		[Display(Name = "Award Nbr")]
		[MaxLength(50)]
		[Column("AwardNbr", TypeName="varchar(50)")]
		public string AwardNbr { get; set; } 	

		[DisplayName("Reason Included In Review")]
		[Display(Name = "Reason Included In Review")]
		[MaxLength(500)]
		[Column("ReasonIncludedInReview", TypeName="nvarchar(500)")]
		public string ReasonIncludedInReview { get; set; } 	

		[DisplayName("Assigned To User Name")]
		[Display(Name = "Assigned To User Name")]
		[NotNull]
		[Required]
		[MaxLength(256)]
		[Column("AssignedToUserName", TypeName="nvarchar(256)")]
		public string AssignedToUserName { get; set; } 	

		[DisplayName("Assignedto Email")]
		[Display(Name = "Assignedto Email")]
		[MaxLength(256)]
		[Column("AssignedtoEmail", TypeName="nvarchar(256)")]
		public string AssignedtoEmail { get; set; } 	

		[DisplayName("Request For Reassignment Id")]
		[Display(Name = "Request For Reassignment Id")]
		[Column("RequestForReassignmentId")]
		public int? RequestForReassignmentId { get; set; } 	

		[DisplayName("Suggested Reviewer Use Id")]
		[Display(Name = "Suggested Reviewer Use Id")]
		[MaxLength(128)]
		[Column("SuggestedReviewerUseId", TypeName="nvarchar(128)")]
		public string SuggestedReviewerUseId { get; set; } 	

		[DisplayName("Suggested Reviewer User Name")]
		[Display(Name = "Suggested Reviewer User Name")]
		[MaxLength(256)]
		[Column("SuggestedReviewerUserName", TypeName="nvarchar(256)")]
		public string SuggestedReviewerUserName { get; set; } 	

		[DisplayName("Note Cnt")]
		[Display(Name = "Note Cnt")]
		[Column("NoteCnt")]
		public int? NoteCnt { get; set; } 	

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public ListableWorkflows_Result0()
			: this(null)
		{}

		public ListableWorkflows_Result0(ListableWorkflows_Result0 other, bool copyKey=false)
		{
			if (other!=null)
			{
				WorkflowId = other.WorkflowId;
				WorkflowKey = other.WorkflowKey;
				Version = other.Version;
				CurrentWorkflowActivityKey = other.CurrentWorkflowActivityKey;
				OwnerUserId = other.OwnerUserId;
				CurrentActivityEnteredAtUtc = other.CurrentActivityEnteredAtUtc;
				TargetUloId = other.TargetUloId;
				ExpectedDurationInSeconds = other.ExpectedDurationInSeconds;
				DueAtUtc = other.DueAtUtc;
				WorkflowRowVersion = other.WorkflowRowVersion;
				Answer = other.Answer;
				AnsweredAtUtc = other.AnsweredAtUtc;
				AnsweredByUserName = other.AnsweredByUserName;
				AnsweredByUserId = other.AnsweredByUserId;
				ViewedAtUtc = other.ViewedAtUtc;
				IsRead = other.IsRead;
				ReviewId = other.ReviewId;
				ReviewName = other.ReviewName;
				RegionId = other.RegionId;
				RegionNumber = other.RegionNumber;
				RegionName = other.RegionName;
				ZoneId = other.ZoneId;
				ZoneShortName = other.ZoneShortName;
				ZoneName = other.ZoneName;
				PegasysDocumentNumber = other.PegasysDocumentNumber;
				PegasysDocumentNumberInstance = other.PegasysDocumentNumberInstance;
				BaCode = other.BaCode;
				Status = other.Status;
				Org = other.Org;
				Amount = other.Amount;
				Valid = other.Valid;
				Fund = other.Fund;
				PegasysTitleNumber = other.PegasysTitleNumber;
				VendorName = other.VendorName;
				ContractingOfficersName = other.ContractingOfficersName;
				AwardNbr = other.AwardNbr;
				ReasonIncludedInReview = other.ReasonIncludedInReview;
				AssignedToUserName = other.AssignedToUserName;
				AssignedtoEmail = other.AssignedtoEmail;
				RequestForReassignmentId = other.RequestForReassignmentId;
				SuggestedReviewerUseId = other.SuggestedReviewerUseId;
				SuggestedReviewerUserName = other.SuggestedReviewerUserName;
				NoteCnt = other.NoteCnt;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(WorkflowKey, nameof(WorkflowKey));
			Requires.Text(WorkflowKey, nameof(WorkflowKey), true, 0, 80);
			Requires.NonNull(CurrentWorkflowActivityKey, nameof(CurrentWorkflowActivityKey));
			Requires.Text(CurrentWorkflowActivityKey, nameof(CurrentWorkflowActivityKey), true, 0, 80);
			Requires.NonNull(OwnerUserId, nameof(OwnerUserId));
			Requires.Text(OwnerUserId, nameof(OwnerUserId), true, 0, 128);
			Requires.Text(Answer, nameof(Answer), true, 0, 100);
			Requires.Text(AnsweredByUserName, nameof(AnsweredByUserName), true, 0, 256);
			Requires.Text(AnsweredByUserId, nameof(AnsweredByUserId), true, 0, 128);
			Requires.Text(ReviewName, nameof(ReviewName), true, 0, 100);
			Requires.NonNull(RegionNumber, nameof(RegionNumber));
			Requires.Text(RegionNumber, nameof(RegionNumber), true, 0, 10);
			Requires.NonNull(RegionName, nameof(RegionName));
			Requires.Text(RegionName, nameof(RegionName), true, 0, 100);
			Requires.Text(ZoneShortName, nameof(ZoneShortName), true, 0, 100);
			Requires.NonNull(ZoneName, nameof(ZoneName));
			Requires.Text(ZoneName, nameof(ZoneName), true, 0, 100);
			Requires.Text(PegasysDocumentNumber, nameof(PegasysDocumentNumber), true, 0, 50);
			Requires.Text(BaCode, nameof(BaCode), true, 0, 50);
			Requires.Text(Status, nameof(Status), true, 0, 50);
			Requires.Text(Org, nameof(Org), true, 0, 50);
			Requires.Text(Fund, nameof(Fund), true, 0, 50);
			Requires.Text(PegasysTitleNumber, nameof(PegasysTitleNumber), true, 0, 100);
			Requires.Text(VendorName, nameof(VendorName), true, 0, 100);
			Requires.Text(ContractingOfficersName, nameof(ContractingOfficersName), true, 0, 50);
			Requires.Text(AwardNbr, nameof(AwardNbr), true, 0, 50);
			Requires.Text(ReasonIncludedInReview, nameof(ReasonIncludedInReview), true, 0, 500);
			Requires.NonNull(AssignedToUserName, nameof(AssignedToUserName));
			Requires.Text(AssignedToUserName, nameof(AssignedToUserName), true, 0, 256);
			Requires.Text(AssignedtoEmail, nameof(AssignedtoEmail), true, 0, 256);
			Requires.Text(SuggestedReviewerUseId, nameof(SuggestedReviewerUseId), true, 0, 128);
			Requires.Text(SuggestedReviewerUserName, nameof(SuggestedReviewerUserName), true, 0, 256);
			PartialValidate();
        }
	}//end of entity class ListableWorkflows_Result0



    public partial class UloDbContext
    {
        public static TimeSpan ConnectingWaitTimeout = TimeSpan.FromMilliseconds(100);

        public static int ConnectingWaitSegments = 10;

        private async Task EnsureConnectedAsync(System.Data.Common.DbConnection conn)
        {
			for (int x=0;conn.State == ConnectionState.Connecting && x < ConnectingWaitSegments; ++x)
			{
                await Task.Delay((int) (ConnectingWaitTimeout.TotalMilliseconds / ConnectingWaitSegments));
			}        
        }

        private int MyTenantId
        {
            get
            {
                var t =  Task.FromResult(-1);
                if (!t.IsCompleted)
                {
                    t.ExecuteSynchronously();
                }
                return t.Result;
            }
        }

        partial void OnAddPrecision(ModelBuilder modelBuilder);

        private void AddPrecision(ModelBuilder modelBuilder)
        {
            OnAddPrecision(modelBuilder);        
        }

        partial void OnAddFluentKeys(ModelBuilder modelBuilder);

        private void AddFluentKeys(ModelBuilder modelBuilder)
        {
            OnAddFluentKeys(modelBuilder);        
            modelBuilder.Entity<ApplicationUser>(e => e.HasNoKey());
            modelBuilder.Entity<AspnetUserApplicationPermissionClaim>(e => e.HasNoKey());
            modelBuilder.Entity<AspnetUserSubjectCategoryClaim>(e => e.HasNoKey());
            modelBuilder.Entity<CardholderDocumentMap>(e => e.HasNoKey());
            modelBuilder.Entity<FiscalMonthMapping>(e => e.HasNoKey());
            modelBuilder.Entity<MostRecentWorkflowView>(e => e.HasNoKey());
            modelBuilder.Entity<ReviewStat>(e => e.HasNoKey());
            modelBuilder.Entity<WorkflowActivity>(e => e.HasNoKey());
            modelBuilder.Entity<WorkflowJustification>(e => e.HasNoKey());
            modelBuilder.Entity<WorkflowProhibitedOwner>(e => e.HasNoKey());
            modelBuilder.Entity<GetEligibleReviewers_Result0>(e => e.HasNoKey());
            modelBuilder.Entity<GetMyGroups_Result0>(e => e.HasNoKey());
            modelBuilder.Entity<GetUloSummariesByPdn_Result0>(e => e.HasNoKey());
            modelBuilder.Entity<ListableWorkflows_Result0>(e => e.HasNoKey());
        }

        partial void OnAddFluentRelationships(ModelBuilder modelBuilder);

        private void AddFluentRelationships(ModelBuilder modelBuilder)
		{
            OnAddFluentRelationships(modelBuilder);
			modelBuilder.Entity<AspNetUserClaim>(e=>e.HasOne(r=>r.User).WithMany(u=>u.UserAspNetUserClaims).HasForeignKey(r=>r.UserId));
			modelBuilder.Entity<Attachment>(e=>e.HasOne(r=>r.CreatedByUser).WithMany(u=>u.CreatedByUserAttachments).HasForeignKey(r=>r.CreatedByUserId));
			modelBuilder.Entity<Attachment>(e=>e.HasOne(r=>r.DeletedByUser).WithMany(u=>u.DeletedByUserAttachments).HasForeignKey(r=>r.DeletedByUserId));
			modelBuilder.Entity<Attachment>(e=>e.HasOne(r=>r.Document).WithMany(u=>u.DocumentAttachments).HasForeignKey(r=>r.DocumentId));
			modelBuilder.Entity<Document>(e=>e.HasOne(r=>r.DeletedByUser).WithMany(u=>u.DeletedByUserDocuments).HasForeignKey(r=>r.DeletedByUserId));
			modelBuilder.Entity<Document>(e=>e.HasOne(r=>r.UploadedByUser).WithMany(u=>u.UploadedByUserDocuments).HasForeignKey(r=>r.UploadedByUserId));
			modelBuilder.Entity<Document>(e=>e.HasOne(r=>r.Workflow).WithMany(u=>u.WorkflowDocuments).HasForeignKey(r=>r.WorkflowId));
			modelBuilder.Entity<DocumentDocumentType>(e=>e.HasOne(r=>r.Document).WithMany(u=>u.DocumentDocumentDocumentTypes).HasForeignKey(r=>r.DocumentId));
			modelBuilder.Entity<DocumentDocumentType>(e=>e.HasOne(r=>r.DocumentType).WithMany(u=>u.DocumentTypeDocumentDocumentTypes).HasForeignKey(r=>r.DocumentTypeId));
			modelBuilder.Entity<FinancialActivity>(e=>e.HasOne(r=>r.Ulo).WithMany(u=>u.UloFinancialActivitys).HasForeignKey(r=>r.UloId));
			modelBuilder.Entity<Note>(e=>e.HasOne(r=>r.DeletedByUser).WithMany(u=>u.DeletedByUserNotes).HasForeignKey(r=>r.DeletedByUserId));
			modelBuilder.Entity<Note>(e=>e.HasOne(r=>r.ParentNote).WithMany(u=>u.ParentNoteNotes).HasForeignKey(r=>r.ParentNoteId));
			modelBuilder.Entity<Note>(e=>e.HasOne(r=>r.Ulo).WithMany(u=>u.UloNotes).HasForeignKey(r=>r.UloId));
			modelBuilder.Entity<Note>(e=>e.HasOne(r=>r.User).WithMany(u=>u.UserNotes).HasForeignKey(r=>r.UserId));
			modelBuilder.Entity<PdnAttribute>(e=>e.HasOne(r=>r.Region).WithMany(u=>u.RegionPdnAttributes).HasForeignKey(r=>r.RegionId));
			modelBuilder.Entity<Region>(e=>e.HasOne(r=>r.Zone).WithMany(u=>u.ZoneRegions).HasForeignKey(r=>r.ZoneId));
			modelBuilder.Entity<RequestForReassignment>(e=>e.HasOne(r=>r.SuggestedReviewer).WithMany(u=>u.SuggestedReviewerRequestForReassignments).HasForeignKey(r=>r.SuggestedReviewerId));
			modelBuilder.Entity<RequestForReassignment>(e=>e.HasOne(r=>r.UnliqudatedWorkflowQuestions).WithMany(u=>u.UnliqudatedWorkflowQuestionsRequestForReassignments).HasForeignKey(r=>r.UnliqudatedWorkflowQuestionsId));
			modelBuilder.Entity<RequestForReassignment>(e=>e.HasOne(r=>r.Workflow).WithMany(u=>u.WorkflowRequestForReassignments).HasForeignKey(r=>r.WorkflowId));
			modelBuilder.Entity<Review>(e=>e.HasOne(r=>r.DeletedByUser).WithMany(u=>u.DeletedByUserReviews).HasForeignKey(r=>r.DeletedByUserId));
			modelBuilder.Entity<Review>(e=>e.HasOne(r=>r.WorkflowDefinition).WithMany(u=>u.WorkflowDefinitionReviews).HasForeignKey(r=>r.WorkflowDefinitionId));
			modelBuilder.Entity<SemiAnnualSamplingStat>(e=>e.HasOne(r=>r.Review).WithMany(u=>u.ReviewSemiAnnualSamplingStats).HasForeignKey(r=>r.ReviewId));
			modelBuilder.Entity<UnliqudatedObjectsWorkflowQuestion>(e=>e.HasOne(r=>r.User).WithMany(u=>u.UserUnliqudatedObjectsWorkflowQuestions).HasForeignKey(r=>r.UserId));
			modelBuilder.Entity<UnliqudatedObjectsWorkflowQuestion>(e=>e.HasOne(r=>r.Workflow).WithMany(u=>u.WorkflowUnliqudatedObjectsWorkflowQuestions).HasForeignKey(r=>r.WorkflowId));
			modelBuilder.Entity<UnliquidatedObligation>(e=>e.HasOne(r=>r.CardholderUser).WithMany(u=>u.CardholderUserUnliquidatedObligations).HasForeignKey(r=>r.CardholderUserId));
			modelBuilder.Entity<UnliquidatedObligation>(e=>e.HasOne(r=>r.Region).WithMany(u=>u.RegionUnliquidatedObligations).HasForeignKey(r=>r.RegionId));
			modelBuilder.Entity<UnliquidatedObligation>(e=>e.HasOne(r=>r.Review).WithMany(u=>u.ReviewUnliquidatedObligations).HasForeignKey(r=>r.ReviewId));
			modelBuilder.Entity<UserUser>(e=>e.HasOne(r=>r.ChildUser).WithMany(u=>u.ChildUserUserUsers).HasForeignKey(r=>r.ChildUserId));
			modelBuilder.Entity<UserUser>(e=>e.HasOne(r=>r.ParentUser).WithMany(u=>u.ParentUserUserUsers).HasForeignKey(r=>r.ParentUserId));
			modelBuilder.Entity<UserUser>(e=>e.HasOne(r=>r.Region).WithMany(u=>u.RegionUserUsers).HasForeignKey(r=>r.RegionId));
			modelBuilder.Entity<Workflow>(e=>e.HasOne(r=>r.OwnerUser).WithMany(u=>u.OwnerUserWorkflows).HasForeignKey(r=>r.OwnerUserId));
			modelBuilder.Entity<Workflow>(e=>e.HasOne(r=>r.TargetUlo).WithMany(u=>u.TargetUloWorkflows).HasForeignKey(r=>r.TargetUloId));
			modelBuilder.Entity<WorkflowHistory>(e=>e.HasOne(r=>r.OwnerUser).WithMany(u=>u.OwnerUserWorkflowHistorys).HasForeignKey(r=>r.OwnerUserId));
			modelBuilder.Entity<WorkflowHistory>(e=>e.HasOne(r=>r.Workflow).WithMany(u=>u.WorkflowWorkflowHistorys).HasForeignKey(r=>r.WorkflowId));
			modelBuilder.Entity<WorkflowView>(e=>e.HasOne(r=>r.User).WithMany(u=>u.UserWorkflowViews).HasForeignKey(r=>r.UserId));
			modelBuilder.Entity<WorkflowView>(e=>e.HasOne(r=>r.Workflow).WithMany(u=>u.WorkflowWorkflowViews).HasForeignKey(r=>r.WorkflowId));
		}

		partial void OnAddQueryFilters(ModelBuilder modelBuilder);

		private void AddQueryFilters(ModelBuilder modelBuilder)
		{
			OnAddQueryFilters(modelBuilder);
			modelBuilder.Entity<Attachment>().HasQueryFilter(x => x.DeletedAtUtc ==null);
			modelBuilder.Entity<Attachment>().HasQueryFilter(x => x.DeletedByUserId ==null);
			modelBuilder.Entity<Document>().HasQueryFilter(x => x.DeletedAtUtc ==null);
			modelBuilder.Entity<Document>().HasQueryFilter(x => x.DeletedByUserId ==null);
			modelBuilder.Entity<FinancialActivity>().HasQueryFilter(x => x.DeletedAtUtc ==null);
			modelBuilder.Entity<Note>().HasQueryFilter(x => x.DeletedAtUtc ==null);
			modelBuilder.Entity<Note>().HasQueryFilter(x => x.DeletedByUserId ==null);
			modelBuilder.Entity<PdnAttribute>().HasQueryFilter(x => x.DeletedAtUtc ==null);
			modelBuilder.Entity<Review>().HasQueryFilter(x => x.DeletedAtUtc ==null);
			modelBuilder.Entity<Review>().HasQueryFilter(x => x.DeletedByUserId ==null);
		}
    }

    public static class UloDbContextTableValueFunctions
    {
		
        public static IQueryable<GetEligibleReviewers_Result0> Execute(this DbSet<GetEligibleReviewers_Result0> q, string workflowIdCsv, bool qualifiedOnly, bool debugMode)
            => q.FromSqlInterpolated($"select * from dbo.GetEligibleReviewers({workflowIdCsv}, {qualifiedOnly}, {debugMode})");

		
        public static IQueryable<GetMyGroups_Result0> Execute(this DbSet<GetMyGroups_Result0> q, string proposedOwnerId)
            => q.FromSqlInterpolated($"select * from dbo.GetMyGroups({proposedOwnerId})");

		
        public static IQueryable<GetUloSummariesByPdn_Result0> Execute(this DbSet<GetUloSummariesByPdn_Result0> q, string pegasysDocumentNumber)
            => q.FromSqlInterpolated($"select * from dbo.GetUloSummariesByPdn({pegasysDocumentNumber})");

		
        public static IQueryable<ListableWorkflows_Result0> Execute(this DbSet<ListableWorkflows_Result0> q, string ownerId, string viewerId)
            => q.FromSqlInterpolated($"select * from dbo.ListableWorkflows({ownerId}, {viewerId})");

    }
}//end of file
